
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002310  000023a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080007a  0080007a  000023be  2**0
                  ALLOC
  3 .stab         000024c0  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001302  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008966  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009714  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__vector_3>
      10:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_8>
      24:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 06 	call	0xcc4	; 0xcc4 <main>
      8a:	0c 94 86 11 	jmp	0x230c	; 0x230c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 11 	jmp	0x22d6	; 0x22d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 11 	jmp	0x22be	; 0x22be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ALARM_INIT>:
 * [Arguments]:          VOID
 *
 * [Returns]:            VOID
 *******************************************************************************/
void ALARM_INIT(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	BUZZER_AND_LED_DIRECTION_PORT |=  (1<<BUZZER_PIN) | (1<<RED_LED_PIN);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8c 60       	ori	r24, 0x0C	; 12
     b5a:	8c 93       	st	X, r24
	BUZZER_AND_LED_DATA_PORT |= 0xF3;
     b5c:	a2 e3       	ldi	r26, 0x32	; 50
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e2 e3       	ldi	r30, 0x32	; 50
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	83 6f       	ori	r24, 0xF3	; 243
     b68:	8c 93       	st	X, r24

}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <ALARM_ON>:
 * [Arguments]:             VOID
 *
 * [Returns]:               VOID
 *******************************************************************************/
void ALARM_ON(void)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	2e 97       	sbiw	r28, 0x0e	; 14
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
	TOGGLE_BIT(BUZZER_AND_LED_DATA_PORT , BUZZER_PIN );
     b84:	a2 e3       	ldi	r26, 0x32	; 50
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	90 81       	ld	r25, Z
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	89 27       	eor	r24, r25
     b92:	8c 93       	st	X, r24

	TOGGLE_BIT(BUZZER_AND_LED_DATA_PORT , RED_LED_PIN );
     b94:	a2 e3       	ldi	r26, 0x32	; 50
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e2 e3       	ldi	r30, 0x32	; 50
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	90 81       	ld	r25, Z
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	89 27       	eor	r24, r25
     ba2:	8c 93       	st	X, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	aa ef       	ldi	r26, 0xFA	; 250
     baa:	b3 e4       	ldi	r27, 0x43	; 67
     bac:	8b 87       	std	Y+11, r24	; 0x0b
     bae:	9c 87       	std	Y+12, r25	; 0x0c
     bb0:	ad 87       	std	Y+13, r26	; 0x0d
     bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bba:	9e 85       	ldd	r25, Y+14	; 0x0e
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4a e7       	ldi	r20, 0x7A	; 122
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	98 87       	std	Y+8, r25	; 0x08
     bd0:	a9 87       	std	Y+9, r26	; 0x09
     bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e8       	ldi	r20, 0x80	; 128
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be8:	88 23       	and	r24, r24
     bea:	2c f4       	brge	.+10     	; 0xbf6 <ALARM_ON+0x86>
		__ticks = 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9e 83       	std	Y+6, r25	; 0x06
     bf2:	8d 83       	std	Y+5, r24	; 0x05
     bf4:	3f c0       	rjmp	.+126    	; 0xc74 <ALARM_ON+0x104>
	else if (__tmp > 65535)
     bf6:	6f 81       	ldd	r22, Y+7	; 0x07
     bf8:	78 85       	ldd	r23, Y+8	; 0x08
     bfa:	89 85       	ldd	r24, Y+9	; 0x09
     bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	57 e4       	ldi	r21, 0x47	; 71
     c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0a:	18 16       	cp	r1, r24
     c0c:	4c f5       	brge	.+82     	; 0xc60 <ALARM_ON+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <ALARM_ON+0xe6>
     c38:	89 e1       	ldi	r24, 0x19	; 25
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9c 83       	std	Y+4, r25	; 0x04
     c3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <ALARM_ON+0xd4>
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	69 f7       	brne	.-38     	; 0xc38 <ALARM_ON+0xc8>
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <ALARM_ON+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c60:	6f 81       	ldd	r22, Y+7	; 0x07
     c62:	78 85       	ldd	r23, Y+8	; 0x08
     c64:	89 85       	ldd	r24, Y+9	; 0x09
     c66:	9a 85       	ldd	r25, Y+10	; 0x0a
     c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	9e 83       	std	Y+6, r25	; 0x06
     c72:	8d 83       	std	Y+5, r24	; 0x05
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <ALARM_ON+0x110>
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

}
     c88:	2e 96       	adiw	r28, 0x0e	; 14
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <ALARM_OFF>:
 * [Arguments]:             VOID
 *
 * [Returns]:               VOID
 *******************************************************************************/
void ALARM_OFF(void)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_AND_LED_DATA_PORT , BUZZER_PIN);
     ca2:	a2 e3       	ldi	r26, 0x32	; 50
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e2 e3       	ldi	r30, 0x32	; 50
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8b 7f       	andi	r24, 0xFB	; 251
     cae:	8c 93       	st	X, r24

	CLEAR_BIT(BUZZER_AND_LED_DATA_PORT , RED_LED_PIN );
     cb0:	a2 e3       	ldi	r26, 0x32	; 50
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e2 e3       	ldi	r30, 0x32	; 50
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	8c 93       	st	X, r24

}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <main>:
#include"CONTROL_ECU.h"



int main()
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	62 97       	sbiw	r28, 0x12	; 18
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
	UART_init(&UART_configuration);
     cd8:	88 e6       	ldi	r24, 0x68	; 104
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <UART_init>
	SREG |= (1<<7);
     ce0:	af e5       	ldi	r26, 0x5F	; 95
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ef e5       	ldi	r30, 0x5F	; 95
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	8c 93       	st	X, r24
	 *              the EEPROM or it already has a saved password
	 *              if yes there is: send command YES_SAVED
	 *              if not : send command NO_SAVED_PASSWORD
	 */
	while(1){
		switch(recieveCommand())
     cee:	0e 94 d7 08 	call	0x11ae	; 0x11ae <recieveCommand>
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	3a 8b       	std	Y+18, r19	; 0x12
     cf8:	29 8b       	std	Y+17, r18	; 0x11
     cfa:	89 89       	ldd	r24, Y+17	; 0x11
     cfc:	9a 89       	ldd	r25, Y+18	; 0x12
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <main+0x42>
     d04:	5d c0       	rjmp	.+186    	; 0xdc0 <main+0xfc>
     d06:	29 89       	ldd	r18, Y+17	; 0x11
     d08:	3a 89       	ldd	r19, Y+18	; 0x12
     d0a:	29 30       	cpi	r18, 0x09	; 9
     d0c:	31 05       	cpc	r19, r1
     d0e:	5c f4       	brge	.+22     	; 0xd26 <main+0x62>
     d10:	89 89       	ldd	r24, Y+17	; 0x11
     d12:	9a 89       	ldd	r25, Y+18	; 0x12
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	c1 f0       	breq	.+48     	; 0xd4a <main+0x86>
     d1a:	29 89       	ldd	r18, Y+17	; 0x11
     d1c:	3a 89       	ldd	r19, Y+18	; 0x12
     d1e:	26 30       	cpi	r18, 0x06	; 6
     d20:	31 05       	cpc	r19, r1
     d22:	c1 f0       	breq	.+48     	; 0xd54 <main+0x90>
     d24:	e4 cf       	rjmp	.-56     	; 0xcee <main+0x2a>
     d26:	89 89       	ldd	r24, Y+17	; 0x11
     d28:	9a 89       	ldd	r25, Y+18	; 0x12
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <main+0x6e>
     d30:	df c0       	rjmp	.+446    	; 0xef0 <main+0x22c>
     d32:	29 89       	ldd	r18, Y+17	; 0x11
     d34:	3a 89       	ldd	r19, Y+18	; 0x12
     d36:	2a 30       	cpi	r18, 0x0A	; 10
     d38:	31 05       	cpc	r19, r1
     d3a:	3c f1       	brlt	.+78     	; 0xd8a <main+0xc6>
     d3c:	89 89       	ldd	r24, Y+17	; 0x11
     d3e:	9a 89       	ldd	r25, Y+18	; 0x12
     d40:	8b 30       	cpi	r24, 0x0B	; 11
     d42:	91 05       	cpc	r25, r1
     d44:	09 f4       	brne	.+2      	; 0xd48 <main+0x84>
     d46:	fa c0       	rjmp	.+500    	; 0xf3c <main+0x278>
     d48:	d2 cf       	rjmp	.-92     	; 0xcee <main+0x2a>
		{
		case PASSWORD_SEND:
			recievePassword(g_password);
     d4a:	87 e8       	ldi	r24, 0x87	; 135
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 c2 07 	call	0xf84	; 0xf84 <recievePassword>
     d52:	cd cf       	rjmp	.-102    	; 0xcee <main+0x2a>
			break;
		case PASSWORD_CONFIRMATION_SEND:
			recievePassword(g_passmatch);
     d54:	81 e9       	ldi	r24, 0x91	; 145
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 c2 07 	call	0xf84	; 0xf84 <recievePassword>
			if(Match_or_NoMatch(g_password,g_passmatch)){
     d5c:	87 e8       	ldi	r24, 0x87	; 135
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	21 e9       	ldi	r18, 0x91	; 145
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	b9 01       	movw	r22, r18
     d66:	0e 94 f7 07 	call	0xfee	; 0xfee <Match_or_NoMatch>
     d6a:	88 23       	and	r24, r24
     d6c:	51 f0       	breq	.+20     	; 0xd82 <main+0xbe>
				storePasswordInMemory();
     d6e:	0e 94 36 08 	call	0x106c	; 0x106c <storePasswordInMemory>
				getSavedPassword(savedpass);
     d72:	8c e8       	ldi	r24, 0x8C	; 140
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 06 09 	call	0x120c	; 0x120c <getSavedPassword>
				sendCommand(PASSWORD_MATCH);
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
     d80:	b6 cf       	rjmp	.-148    	; 0xcee <main+0x2a>
			}
			else
			{
				sendCommand(PASSWORD_NOT_MATCHED);
     d82:	85 e0       	ldi	r24, 0x05	; 5
     d84:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
     d88:	b2 cf       	rjmp	.-156    	; 0xcee <main+0x2a>
			}
			break;
		case CHECK_PASSWORD:
			recievePassword(g_password);
     d8a:	87 e8       	ldi	r24, 0x87	; 135
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 c2 07 	call	0xf84	; 0xf84 <recievePassword>
			getSavedPassword(savedpass);
     d92:	8c e8       	ldi	r24, 0x8C	; 140
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 06 09 	call	0x120c	; 0x120c <getSavedPassword>
			if(Match_or_NoMatch(g_password,savedpass))
     d9a:	87 e8       	ldi	r24, 0x87	; 135
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	2c e8       	ldi	r18, 0x8C	; 140
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	0e 94 f7 07 	call	0xfee	; 0xfee <Match_or_NoMatch>
     da8:	88 23       	and	r24, r24
     daa:	31 f0       	breq	.+12     	; 0xdb8 <main+0xf4>
			{
				sendCommand(PASSWORD_MATCH);
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
				g_wrong=0;
     db2:	10 92 7b 00 	sts	0x007B, r1
     db6:	9b cf       	rjmp	.-202    	; 0xcee <main+0x2a>
			}
			else
			{
				sendCommand(PASSWORD_NOT_MATCHED);
     db8:	85 e0       	ldi	r24, 0x05	; 5
     dba:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
     dbe:	97 cf       	rjmp	.-210    	; 0xcee <main+0x2a>
			}
			break;
		case OPEN_DOOR:
			Motor_init();
     dc0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <Motor_init>
			Timer_init(&TIMER_configuration);
     dc4:	8c e6       	ldi	r24, 0x6C	; 108
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <Timer_init>
			Timer_setCallBack(g_tickCounterMotor,Timer1);
     dcc:	89 ea       	ldi	r24, 0xA9	; 169
     dce:	99 e0       	ldi	r25, 0x09	; 9
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <Timer_setCallBack>
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <main+0x118>
			while(g_tick != TICKS_15SECS)
			{
				Motor_ON_ClockWise();
     dd8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Motor_ON_ClockWise>
			break;
		case OPEN_DOOR:
			Motor_init();
			Timer_init(&TIMER_configuration);
			Timer_setCallBack(g_tickCounterMotor,Timer1);
			while(g_tick != TICKS_15SECS)
     ddc:	80 91 7a 00 	lds	r24, 0x007A
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	d1 f7       	brne	.-12     	; 0xdd8 <main+0x114>
			{
				Motor_ON_ClockWise();
			}
			if(g_tick == TICKS_15SECS)
     de4:	80 91 7a 00 	lds	r24, 0x007A
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	09 f0       	breq	.+2      	; 0xdee <main+0x12a>
     dec:	74 c0       	rjmp	.+232    	; 0xed6 <main+0x212>
			{

				Motor_Stop();
     dee:	0e 94 28 0a 	call	0x1450	; 0x1450 <Motor_Stop>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	aa e7       	ldi	r26, 0x7A	; 122
     df8:	b5 e4       	ldi	r27, 0x45	; 69
     dfa:	8b 87       	std	Y+11, r24	; 0x0b
     dfc:	9c 87       	std	Y+12, r25	; 0x0c
     dfe:	ad 87       	std	Y+13, r26	; 0x0d
     e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e02:	6b 85       	ldd	r22, Y+11	; 0x0b
     e04:	7c 85       	ldd	r23, Y+12	; 0x0c
     e06:	8d 85       	ldd	r24, Y+13	; 0x0d
     e08:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	4a e7       	ldi	r20, 0x7A	; 122
     e10:	53 e4       	ldi	r21, 0x43	; 67
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	8f 83       	std	Y+7, r24	; 0x07
     e1c:	98 87       	std	Y+8, r25	; 0x08
     e1e:	a9 87       	std	Y+9, r26	; 0x09
     e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e22:	6f 81       	ldd	r22, Y+7	; 0x07
     e24:	78 85       	ldd	r23, Y+8	; 0x08
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e36:	88 23       	and	r24, r24
     e38:	2c f4       	brge	.+10     	; 0xe44 <main+0x180>
		__ticks = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9e 83       	std	Y+6, r25	; 0x06
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	3f c0       	rjmp	.+126    	; 0xec2 <main+0x1fe>
	else if (__tmp > 65535)
     e44:	6f 81       	ldd	r22, Y+7	; 0x07
     e46:	78 85       	ldd	r23, Y+8	; 0x08
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e58:	18 16       	cp	r1, r24
     e5a:	4c f5       	brge	.+82     	; 0xeae <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	0f c0       	rjmp	.+30     	; 0xea4 <main+0x1e0>
     e86:	89 e1       	ldi	r24, 0x19	; 25
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <main+0x1ce>
     e96:	9c 83       	std	Y+4, r25	; 0x04
     e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	69 f7       	brne	.-38     	; 0xe86 <main+0x1c2>
     eac:	14 c0       	rjmp	.+40     	; 0xed6 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <main+0x20a>
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(FOUR_SECONDS_DELAY);
			}
			if(g_tick>= TICKS_15SECS && g_tick<=TICKS_15SECS_REVERSE)
     ed6:	80 91 7a 00 	lds	r24, 0x007A
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	08 f4       	brcc	.+2      	; 0xee0 <main+0x21c>
     ede:	07 cf       	rjmp	.-498    	; 0xcee <main+0x2a>
     ee0:	80 91 7a 00 	lds	r24, 0x007A
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	08 f0       	brcs	.+2      	; 0xeea <main+0x226>
     ee8:	02 cf       	rjmp	.-508    	; 0xcee <main+0x2a>
			{
				Motor_ON_Anti_ClockWise();
     eea:	0e 94 09 0a 	call	0x1412	; 0x1412 <Motor_ON_Anti_ClockWise>
     eee:	ff ce       	rjmp	.-514    	; 0xcee <main+0x2a>
			}

			break;
		case WRONG_PASSWORD:
			g_wrong++;
     ef0:	80 91 7b 00 	lds	r24, 0x007B
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 7b 00 	sts	0x007B, r24
			if(g_wrong==MAX_WRONG_COUNTER)
     efa:	80 91 7b 00 	lds	r24, 0x007B
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	09 f0       	breq	.+2      	; 0xf04 <main+0x240>
     f02:	f5 ce       	rjmp	.-534    	; 0xcee <main+0x2a>
			{
				ALARM_INIT();
     f04:	0e 94 a3 05 	call	0xb46	; 0xb46 <ALARM_INIT>
				Timer_init(&TIMER_configuration);
     f08:	8c e6       	ldi	r24, 0x6C	; 108
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <Timer_init>
				Timer_setCallBack(g_tickCounterAlarm,Timer1);
     f10:	80 ec       	ldi	r24, 0xC0	; 192
     f12:	99 e0       	ldi	r25, 0x09	; 9
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <Timer_setCallBack>
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <main+0x25c>
				while(g_tick != TIMER_TICKS_1MINUTE)
				{
					ALARM_ON();
     f1c:	0e 94 b8 05 	call	0xb70	; 0xb70 <ALARM_ON>
			if(g_wrong==MAX_WRONG_COUNTER)
			{
				ALARM_INIT();
				Timer_init(&TIMER_configuration);
				Timer_setCallBack(g_tickCounterAlarm,Timer1);
				while(g_tick != TIMER_TICKS_1MINUTE)
     f20:	80 91 7a 00 	lds	r24, 0x007A
     f24:	8c 30       	cpi	r24, 0x0C	; 12
     f26:	d1 f7       	brne	.-12     	; 0xf1c <main+0x258>
				{
					ALARM_ON();
				}
				if(g_tick == TIMER_TICKS_1MINUTE)
     f28:	80 91 7a 00 	lds	r24, 0x007A
     f2c:	8c 30       	cpi	r24, 0x0C	; 12
     f2e:	09 f0       	breq	.+2      	; 0xf32 <main+0x26e>
     f30:	de ce       	rjmp	.-580    	; 0xcee <main+0x2a>
				{
					g_wrong=0;
     f32:	10 92 7b 00 	sts	0x007B, r1
					ALARM_OFF();
     f36:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ALARM_OFF>
     f3a:	d9 ce       	rjmp	.-590    	; 0xcee <main+0x2a>
				}
			}
			break;
		case CHECK_IF_SAVED:
			getSavedPassword(savedpass);
     f3c:	8c e8       	ldi	r24, 0x8C	; 140
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 06 09 	call	0x120c	; 0x120c <getSavedPassword>
			uint8 counter=0;
     f44:	18 8a       	std	Y+16, r1	; 0x10
			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     f46:	1f 86       	std	Y+15, r1	; 0x0f
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <main+0x2a4>
			{
				if(savedpass[i] == DEFUALT_VALUE_OF_EEPROM)
     f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	e4 57       	subi	r30, 0x74	; 116
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	19 f4       	brne	.+6      	; 0xf62 <main+0x29e>
				{
					counter++;
     f5c:	88 89       	ldd	r24, Y+16	; 0x10
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	88 8b       	std	Y+16, r24	; 0x10
			}
			break;
		case CHECK_IF_SAVED:
			getSavedPassword(savedpass);
			uint8 counter=0;
			for(uint8 i = 0 ; i < PASSWORD_ARRAY_SIZE; i++)
     f62:	8f 85       	ldd	r24, Y+15	; 0x0f
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	8f 87       	std	Y+15, r24	; 0x0f
     f68:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6a:	85 30       	cpi	r24, 0x05	; 5
     f6c:	70 f3       	brcs	.-36     	; 0xf4a <main+0x286>
				{
					counter++;
				}

			}
			if (counter==PASSWORD_ARRAY_SIZE)
     f6e:	88 89       	ldd	r24, Y+16	; 0x10
     f70:	85 30       	cpi	r24, 0x05	; 5
     f72:	21 f4       	brne	.+8      	; 0xf7c <main+0x2b8>
			{
				sendCommand(NO_SAVED_PASSWORD);
     f74:	8d e0       	ldi	r24, 0x0D	; 13
     f76:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
     f7a:	b9 ce       	rjmp	.-654    	; 0xcee <main+0x2a>
			}
			else
			{
				sendCommand(YES_SAVED);
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sendCommand>
     f82:	b5 ce       	rjmp	.-662    	; 0xcee <main+0x2a>

00000f84 <recievePassword>:
 * [Arguments]:       ARRAY of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void recievePassword(uint8 a_arr[])
{
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <recievePassword+0xa>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <recievePassword+0xc>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9c 83       	std	Y+4, r25	; 0x04
     f96:	8b 83       	std	Y+3, r24	; 0x03
	while(UART_recieveByte() != READY){};
     f98:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <recievePassword+0x14>
	UART_sendByte(READY);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     fa6:	1a 82       	std	Y+2, r1	; 0x02
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	10 c0       	rjmp	.+32     	; 0xfcc <recievePassword+0x48>
		a_arr[i]=UART_recieveByte();
     fac:	29 81       	ldd	r18, Y+1	; 0x01
     fae:	3a 81       	ldd	r19, Y+2	; 0x02
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	8c 01       	movw	r16, r24
     fb6:	02 0f       	add	r16, r18
     fb8:	13 1f       	adc	r17, r19
     fba:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
     fbe:	f8 01       	movw	r30, r16
     fc0:	80 83       	st	Z, r24
 ***************************************************************************************************/
void recievePassword(uint8 a_arr[])
{
	while(UART_recieveByte() != READY){};
	UART_sendByte(READY);
	for(int i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	91 05       	cpc	r25, r1
     fd4:	5c f3       	brlt	.-42     	; 0xfac <recievePassword+0x28>
		a_arr[i]=UART_recieveByte();
	}
	UART_sendByte(DONE);
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <Match_or_NoMatch>:
 * [Arguments]:       TWO ARRAYS of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         BOOLEAN TRUE OR FALSE
 ***************************************************************************************************/
bool Match_or_NoMatch(uint8 a_arr1[],uint8 a_arr2[])
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	27 97       	sbiw	r28, 0x07	; 7
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	7e 83       	std	Y+6, r23	; 0x06
    1008:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter=0;
    100a:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	1a c0       	rjmp	.+52     	; 0x1044 <Match_or_NoMatch+0x56>
	{
		if(a_arr1[i]==a_arr2[i]){
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	fc 01       	movw	r30, r24
    101c:	e2 0f       	add	r30, r18
    101e:	f3 1f       	adc	r31, r19
    1020:	40 81       	ld	r20, Z
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	fc 01       	movw	r30, r24
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	80 81       	ld	r24, Z
    1034:	48 17       	cp	r20, r24
    1036:	19 f4       	brne	.+6      	; 0x103e <Match_or_NoMatch+0x50>
			counter++;
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	8a 83       	std	Y+2, r24	; 0x02
 * [Returns]:         BOOLEAN TRUE OR FALSE
 ***************************************************************************************************/
bool Match_or_NoMatch(uint8 a_arr1[],uint8 a_arr2[])
{
	uint8 counter=0;
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	18 f3       	brcs	.-58     	; 0x1010 <Match_or_NoMatch+0x22>
	{
		if(a_arr1[i]==a_arr2[i]){
			counter++;
		}
	}
	if(counter==PASSWORD_ARRAY_SIZE){
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	19 f4       	brne	.+6      	; 0x1056 <Match_or_NoMatch+0x68>
		return TRUE;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	8f 83       	std	Y+7, r24	; 0x07
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <Match_or_NoMatch+0x6a>
	}
	else{
		return FALSE;
    1056:	1f 82       	std	Y+7, r1	; 0x07
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
    105a:	27 96       	adiw	r28, 0x07	; 7
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <storePasswordInMemory>:
 *
 * [Returns]:         VOID
 ***************************************************************************************************/

void storePasswordInMemory(void)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	2f 97       	sbiw	r28, 0x0f	; 15
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61

	EEPROM_init();
    1080:	0e 94 04 10 	call	0x2008	; 0x2008 <EEPROM_init>
	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
    1084:	1f 86       	std	Y+15, r1	; 0x0f
    1086:	86 c0       	rjmp	.+268    	; 0x1194 <storePasswordInMemory+0x128>
		EEPROM_writeByte(0x0311+i,g_password[i]);
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	8f 5e       	subi	r24, 0xEF	; 239
    1090:	9c 4f       	sbci	r25, 0xFC	; 252
    1092:	ac 01       	movw	r20, r24
    1094:	8f 85       	ldd	r24, Y+15	; 0x0f
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	e9 57       	subi	r30, 0x79	; 121
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	20 81       	ld	r18, Z
    10a2:	ca 01       	movw	r24, r20
    10a4:	62 2f       	mov	r22, r18
    10a6:	0e 94 10 10 	call	0x2020	; 0x2020 <EEPROM_writeByte>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	aa ef       	ldi	r26, 0xFA	; 250
    10b0:	b3 e4       	ldi	r27, 0x43	; 67
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
    10b4:	9c 87       	std	Y+12, r25	; 0x0c
    10b6:	ad 87       	std	Y+13, r26	; 0x0d
    10b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    10bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10be:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a e7       	ldi	r20, 0x7A	; 122
    10c8:	53 e4       	ldi	r21, 0x43	; 67
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8f 83       	std	Y+7, r24	; 0x07
    10d4:	98 87       	std	Y+8, r25	; 0x08
    10d6:	a9 87       	std	Y+9, r26	; 0x09
    10d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <storePasswordInMemory+0x90>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <storePasswordInMemory+0x10e>
	else if (__tmp > 65535)
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <storePasswordInMemory+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6b 85       	ldd	r22, Y+11	; 0x0b
    1116:	7c 85       	ldd	r23, Y+12	; 0x0c
    1118:	8d 85       	ldd	r24, Y+13	; 0x0d
    111a:	9e 85       	ldd	r25, Y+14	; 0x0e
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	0f c0       	rjmp	.+30     	; 0x115c <storePasswordInMemory+0xf0>
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <storePasswordInMemory+0xde>
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <storePasswordInMemory+0xd2>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <storePasswordInMemory+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <storePasswordInMemory+0x11a>
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01

void storePasswordInMemory(void)
{

	EEPROM_init();
	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++){
    118e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8f 87       	std	Y+15, r24	; 0x0f
    1194:	8f 85       	ldd	r24, Y+15	; 0x0f
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	08 f4       	brcc	.+2      	; 0x119c <storePasswordInMemory+0x130>
    119a:	76 cf       	rjmp	.-276    	; 0x1088 <storePasswordInMemory+0x1c>
		EEPROM_writeByte(0x0311+i,g_password[i]);
		_delay_ms(HALF_SECOND_DELAY);
	}

}
    119c:	2f 96       	adiw	r28, 0x0f	; 15
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <recieveCommand>:
 * [Arguments]:       VOID
 *
 * [Returns]:         unsigned integer command number
 ***************************************************************************************************/
uint8 recieveCommand(void)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
    11b6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <recieveCommand+0x8>
	UART_sendByte(READY);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
	command=UART_recieveByte();
    11c4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    11c8:	80 93 86 00 	sts	0x0086, r24
	UART_sendByte(DONE);
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
	return command;
    11d2:	80 91 86 00 	lds	r24, 0x0086
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <sendCommand>:
 * [Arguments]:       unsigned integer command number
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void sendCommand(uint8 command)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
	while(UART_recieveByte() != READY){};
    11ee:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <sendCommand+0x12>
	UART_sendByte(command);
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    11fc:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	e1 f7       	brne	.-8      	; 0x11fc <sendCommand+0x20>

}
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <getSavedPassword>:
 * [Arguments]:       Array of unsigned integers of size 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void getSavedPassword(uint8 a_arr[])
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	61 97       	sbiw	r28, 0x11	; 17
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	99 8b       	std	Y+17, r25	; 0x11
    1222:	88 8b       	std	Y+16, r24	; 0x10
	EEPROM_init();
    1224:	0e 94 04 10 	call	0x2008	; 0x2008 <EEPROM_init>
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
    1228:	1f 86       	std	Y+15, r1	; 0x0f
    122a:	86 c0       	rjmp	.+268    	; 0x1338 <getSavedPassword+0x12c>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
    122c:	8f 85       	ldd	r24, Y+15	; 0x0f
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	8f 5e       	subi	r24, 0xEF	; 239
    1234:	9c 4f       	sbci	r25, 0xFC	; 252
    1236:	ac 01       	movw	r20, r24
    1238:	8f 85       	ldd	r24, Y+15	; 0x0f
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	88 89       	ldd	r24, Y+16	; 0x10
    1240:	99 89       	ldd	r25, Y+17	; 0x11
    1242:	28 0f       	add	r18, r24
    1244:	39 1f       	adc	r19, r25
    1246:	ca 01       	movw	r24, r20
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <EEPROM_readByte>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	aa e7       	ldi	r26, 0x7A	; 122
    1254:	b4 e4       	ldi	r27, 0x44	; 68
    1256:	8b 87       	std	Y+11, r24	; 0x0b
    1258:	9c 87       	std	Y+12, r25	; 0x0c
    125a:	ad 87       	std	Y+13, r26	; 0x0d
    125c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1260:	7c 85       	ldd	r23, Y+12	; 0x0c
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	9e 85       	ldd	r25, Y+14	; 0x0e
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a e7       	ldi	r20, 0x7A	; 122
    126c:	53 e4       	ldi	r21, 0x43	; 67
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8f 83       	std	Y+7, r24	; 0x07
    1278:	98 87       	std	Y+8, r25	; 0x08
    127a:	a9 87       	std	Y+9, r26	; 0x09
    127c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <getSavedPassword+0x94>
		__ticks = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
    129e:	3f c0       	rjmp	.+126    	; 0x131e <getSavedPassword+0x112>
	else if (__tmp > 65535)
    12a0:	6f 81       	ldd	r22, Y+7	; 0x07
    12a2:	78 85       	ldd	r23, Y+8	; 0x08
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	4c f5       	brge	.+82     	; 0x130a <getSavedPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    12bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12be:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e2       	ldi	r20, 0x20	; 32
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9e 83       	std	Y+6, r25	; 0x06
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <getSavedPassword+0xf4>
    12e2:	89 e1       	ldi	r24, 0x19	; 25
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <getSavedPassword+0xe2>
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9e 83       	std	Y+6, r25	; 0x06
    12fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f7       	brne	.-38     	; 0x12e2 <getSavedPassword+0xd6>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <getSavedPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <getSavedPassword+0x11e>
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:         VOID
 ***************************************************************************************************/
void getSavedPassword(uint8 a_arr[])
{
	EEPROM_init();
	for(uint8 i=0 ; i<PASSWORD_ARRAY_SIZE ; i++){
    1332:	8f 85       	ldd	r24, Y+15	; 0x0f
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	8f 87       	std	Y+15, r24	; 0x0f
    1338:	8f 85       	ldd	r24, Y+15	; 0x0f
    133a:	85 30       	cpi	r24, 0x05	; 5
    133c:	08 f4       	brcc	.+2      	; 0x1340 <getSavedPassword+0x134>
    133e:	76 cf       	rjmp	.-276    	; 0x122c <getSavedPassword+0x20>
		EEPROM_readByte(0x0311+i, &a_arr[i]);
		_delay_ms(1000);
	}
}
    1340:	61 96       	adiw	r28, 0x11	; 17
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <g_tickCounterMotor>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void g_tickCounterMotor(void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    135a:	80 91 7a 00 	lds	r24, 0x007A
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 93 7a 00 	sts	0x007A, r24
	if(g_tick==TIMER_TICKS_15SEC_STOP)
    1364:	80 91 7a 00 	lds	r24, 0x007A
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	39 f4       	brne	.+14     	; 0x137a <g_tickCounterMotor+0x28>
	{
		Timer_DeInit(Timer1);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <Timer_DeInit>
		Motor_Stop();
    1372:	0e 94 28 0a 	call	0x1450	; 0x1450 <Motor_Stop>
		g_tick=0;
    1376:	10 92 7a 00 	sts	0x007A, r1
	}
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <g_tickCounterAlarm>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void g_tickCounterAlarm(void)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1388:	80 91 7a 00 	lds	r24, 0x007A
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 7a 00 	sts	0x007A, r24
	if(g_tick==TIMER_TICKS_1MINUTE_STOP)
    1392:	80 91 7a 00 	lds	r24, 0x007A
    1396:	8d 30       	cpi	r24, 0x0D	; 13
    1398:	29 f4       	brne	.+10     	; 0x13a4 <g_tickCounterAlarm+0x24>
	{
		Timer_DeInit(Timer1);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <Timer_DeInit>
		g_tick=0;
    13a0:	10 92 7a 00 	sts	0x007A, r1

	}
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <Motor_init>:
 * [Arguments]:             VOID
 *
 * [Returns]:               VOID
 ***************************************************************************************************/
void Motor_init(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DIRECTION_PORT |=  (1<<MOTOR_PIN_IN1) | (1<<MOTOR_PIN_IN2);
    13b2:	a4 e3       	ldi	r26, 0x34	; 52
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e4 e3       	ldi	r30, 0x34	; 52
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 63       	ori	r24, 0x30	; 48
    13be:	8c 93       	st	X, r24
	MOTOR_DATA_PORT &= 0xCF;
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7c       	andi	r24, 0xCF	; 207
    13cc:	8c 93       	st	X, r24
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <Motor_ON_ClockWise>:
 *
 * [Returns]:               VOID
 ***************************************************************************************************/

void Motor_ON_ClockWise(void)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN1);
    13dc:	25 e3       	ldi	r18, 0x35	; 53
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 7e       	andi	r24, 0xEF	; 239
    13ec:	8c 93       	st	X, r24
    13ee:	8c 91       	ld	r24, X
    13f0:	f9 01       	movw	r30, r18
    13f2:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN2);
    13f4:	25 e3       	ldi	r18, 0x35	; 53
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	a5 e3       	ldi	r26, 0x35	; 53
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e3       	ldi	r30, 0x35	; 53
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 62       	ori	r24, 0x20	; 32
    1404:	8c 93       	st	X, r24
    1406:	8c 91       	ld	r24, X
    1408:	f9 01       	movw	r30, r18
    140a:	80 83       	st	Z, r24

}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <Motor_ON_Anti_ClockWise>:
 * [Returns]:               VOID
 ***************************************************************************************************/


void Motor_ON_Anti_ClockWise(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN2);
    141a:	25 e3       	ldi	r18, 0x35	; 53
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	a5 e3       	ldi	r26, 0x35	; 53
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e3       	ldi	r30, 0x35	; 53
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	8c 93       	st	X, r24
    142c:	8c 91       	ld	r24, X
    142e:	f9 01       	movw	r30, r18
    1430:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = SET_BIT (MOTOR_DATA_PORT, MOTOR_PIN_IN1);
    1432:	25 e3       	ldi	r18, 0x35	; 53
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	a5 e3       	ldi	r26, 0x35	; 53
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e5 e3       	ldi	r30, 0x35	; 53
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 61       	ori	r24, 0x10	; 16
    1442:	8c 93       	st	X, r24
    1444:	8c 91       	ld	r24, X
    1446:	f9 01       	movw	r30, r18
    1448:	80 83       	st	Z, r24

}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <Motor_Stop>:
 * [Arguments]:             VOID
 *
 * [Returns]:               VOID
 ***************************************************************************************************/
void Motor_Stop(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	MOTOR_DATA_PORT = CLEAR_BIT(MOTOR_DATA_PORT , MOTOR_PIN_IN2);
    1458:	25 e3       	ldi	r18, 0x35	; 53
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	8c 93       	st	X, r24
    146a:	8c 91       	ld	r24, X
    146c:	f9 01       	movw	r30, r18
    146e:	80 83       	st	Z, r24
	MOTOR_DATA_PORT = CLEAR_BIT( MOTOR_DATA_PORT, MOTOR_PIN_IN1);
    1470:	25 e3       	ldi	r18, 0x35	; 53
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	a5 e3       	ldi	r26, 0x35	; 53
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e3       	ldi	r30, 0x35	; 53
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8f 7e       	andi	r24, 0xEF	; 239
    1480:	8c 93       	st	X, r24
    1482:	8c 91       	ld	r24, X
    1484:	f9 01       	movw	r30, r18
    1486:	80 83       	st	Z, r24

}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <__vector_9>:

/**************************************************************************
 *                              Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    148e:	1f 92       	push	r1
    1490:	0f 92       	push	r0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	0f 92       	push	r0
    1496:	11 24       	eor	r1, r1
    1498:	2f 93       	push	r18
    149a:	3f 93       	push	r19
    149c:	4f 93       	push	r20
    149e:	5f 93       	push	r21
    14a0:	6f 93       	push	r22
    14a2:	7f 93       	push	r23
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    14b8:	80 91 7e 00 	lds	r24, 0x007E
    14bc:	90 91 7f 00 	lds	r25, 0x007F
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	29 f0       	breq	.+10     	; 0x14ce <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)();
    14c4:	e0 91 7e 00 	lds	r30, 0x007E
    14c8:	f0 91 7f 00 	lds	r31, 0x007F
    14cc:	09 95       	icall
	}
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	ff 91       	pop	r31
    14d4:	ef 91       	pop	r30
    14d6:	bf 91       	pop	r27
    14d8:	af 91       	pop	r26
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	7f 91       	pop	r23
    14e0:	6f 91       	pop	r22
    14e2:	5f 91       	pop	r21
    14e4:	4f 91       	pop	r20
    14e6:	3f 91       	pop	r19
    14e8:	2f 91       	pop	r18
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    151e:	80 91 7e 00 	lds	r24, 0x007E
    1522:	90 91 7f 00 	lds	r25, 0x007F
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	29 f0       	breq	.+10     	; 0x1534 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)();
    152a:	e0 91 7e 00 	lds	r30, 0x007E
    152e:	f0 91 7f 00 	lds	r31, 0x007F
    1532:	09 95       	icall
	}
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_8>:

/**************************************************************************
 *                              Timer1
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1584:	80 91 80 00 	lds	r24, 0x0080
    1588:	90 91 81 00 	lds	r25, 0x0081
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	29 f0       	breq	.+10     	; 0x159a <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)();
    1590:	e0 91 80 00 	lds	r30, 0x0080
    1594:	f0 91 81 00 	lds	r31, 0x0081
    1598:	09 95       	icall
	}
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	ff 91       	pop	r31
    15a0:	ef 91       	pop	r30
    15a2:	bf 91       	pop	r27
    15a4:	af 91       	pop	r26
    15a6:	9f 91       	pop	r25
    15a8:	8f 91       	pop	r24
    15aa:	7f 91       	pop	r23
    15ac:	6f 91       	pop	r22
    15ae:	5f 91       	pop	r21
    15b0:	4f 91       	pop	r20
    15b2:	3f 91       	pop	r19
    15b4:	2f 91       	pop	r18
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    15ea:	80 91 80 00 	lds	r24, 0x0080
    15ee:	90 91 81 00 	lds	r25, 0x0081
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	29 f0       	breq	.+10     	; 0x1600 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)();
    15f6:	e0 91 80 00 	lds	r30, 0x0080
    15fa:	f0 91 81 00 	lds	r31, 0x0081
    15fe:	09 95       	icall
	}
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	ff 91       	pop	r31
    1606:	ef 91       	pop	r30
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_4>:

/**************************************************************************
 *                              Timer2
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	2f 93       	push	r18
    1632:	3f 93       	push	r19
    1634:	4f 93       	push	r20
    1636:	5f 93       	push	r21
    1638:	6f 93       	push	r22
    163a:	7f 93       	push	r23
    163c:	8f 93       	push	r24
    163e:	9f 93       	push	r25
    1640:	af 93       	push	r26
    1642:	bf 93       	push	r27
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1650:	80 91 82 00 	lds	r24, 0x0082
    1654:	90 91 83 00 	lds	r25, 0x0083
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	29 f0       	breq	.+10     	; 0x1666 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)();
    165c:	e0 91 82 00 	lds	r30, 0x0082
    1660:	f0 91 83 00 	lds	r31, 0x0083
    1664:	09 95       	icall
	}
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	ff 91       	pop	r31
    166c:	ef 91       	pop	r30
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	7f 91       	pop	r23
    1678:	6f 91       	pop	r22
    167a:	5f 91       	pop	r21
    167c:	4f 91       	pop	r20
    167e:	3f 91       	pop	r19
    1680:	2f 91       	pop	r18
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    168c:	1f 92       	push	r1
    168e:	0f 92       	push	r0
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	0f 92       	push	r0
    1694:	11 24       	eor	r1, r1
    1696:	2f 93       	push	r18
    1698:	3f 93       	push	r19
    169a:	4f 93       	push	r20
    169c:	5f 93       	push	r21
    169e:	6f 93       	push	r22
    16a0:	7f 93       	push	r23
    16a2:	8f 93       	push	r24
    16a4:	9f 93       	push	r25
    16a6:	af 93       	push	r26
    16a8:	bf 93       	push	r27
    16aa:	ef 93       	push	r30
    16ac:	ff 93       	push	r31
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    16b6:	80 91 82 00 	lds	r24, 0x0082
    16ba:	90 91 83 00 	lds	r25, 0x0083
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	29 f0       	breq	.+10     	; 0x16cc <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)();
    16c2:	e0 91 82 00 	lds	r30, 0x0082
    16c6:	f0 91 83 00 	lds	r31, 0x0083
    16ca:	09 95       	icall
	}
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <Timer_init>:
 *
 * [Returns]:        VOID
 ***************************************************************************************************/

void Timer_init(const Timer_Config * Config_Ptr)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	6a 97       	sbiw	r28, 0x1a	; 26
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    170a:	e9 81       	ldd	r30, Y+1	; 0x01
    170c:	fa 81       	ldd	r31, Y+2	; 0x02
    170e:	80 85       	ldd	r24, Z+8	; 0x08
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3a 8f       	std	Y+26, r19	; 0x1a
    1716:	29 8f       	std	Y+25, r18	; 0x19
    1718:	89 8d       	ldd	r24, Y+25	; 0x19
    171a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <Timer_init+0x32>
    1722:	cf c0       	rjmp	.+414    	; 0x18c2 <Timer_init+0x1d0>
    1724:	e9 8d       	ldd	r30, Y+25	; 0x19
    1726:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1728:	e2 30       	cpi	r30, 0x02	; 2
    172a:	f1 05       	cpc	r31, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <Timer_init+0x3e>
    172e:	9c c1       	rjmp	.+824    	; 0x1a68 <Timer_init+0x376>
    1730:	29 8d       	ldd	r18, Y+25	; 0x19
    1732:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1734:	21 15       	cp	r18, r1
    1736:	31 05       	cpc	r19, r1
    1738:	09 f0       	breq	.+2      	; 0x173c <Timer_init+0x4a>
    173a:	5e c2       	rjmp	.+1212   	; 0x1bf8 <Timer_init+0x506>
	{

	case Timer0:

		/*Clear registers of Timer0 before accessing any of them*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    173c:	e3 e5       	ldi	r30, 0x53	; 83
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	30 81       	ld	r19, Z
    1742:	e3 e5       	ldi	r30, 0x53	; 83
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    1748:	e2 e5       	ldi	r30, 0x52	; 82
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	e2 e5       	ldi	r30, 0x52	; 82
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    1754:	ec e5       	ldi	r30, 0x5C	; 92
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	90 81       	ld	r25, Z
    175a:	ec e5       	ldi	r30, 0x5C	; 92
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    1760:	e9 e5       	ldi	r30, 0x59	; 89
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	20 81       	ld	r18, Z
    1766:	e9 e5       	ldi	r30, 0x59	; 89
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
		/*
		 * Configure initial value for Timer0 to start count from it
		 * 0XFF so that value doesn't exceed 8_bits
		 */

		TIMER0_CONTROL_REGIRSTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    176c:	23 e5       	ldi	r18, 0x53	; 83
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	a2 81       	ldd	r26, Z+2	; 0x02
    177a:	b3 81       	ldd	r27, Z+3	; 0x03
    177c:	f9 01       	movw	r30, r18
    177e:	80 83       	st	Z, r24
		 * TIMER Pre-scaler value for Timer0 in TCCR0 Register
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
		 */

		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    1780:	a3 e5       	ldi	r26, 0x53	; 83
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e3 e5       	ldi	r30, 0x53	; 83
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	98 2f       	mov	r25, r24
    178c:	98 7f       	andi	r25, 0xF8	; 248
    178e:	e9 81       	ldd	r30, Y+1	; 0x01
    1790:	fa 81       	ldd	r31, Y+2	; 0x02
    1792:	81 85       	ldd	r24, Z+9	; 0x09
    1794:	89 2b       	or	r24, r25
    1796:	8c 93       	st	X, r24
		 * Compare output mode:
		 *                     OC0 disconnected
		 *                     Clear COM00 bit in TCCR0 register
		 *                     Clear COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    1798:	23 e5       	ldi	r18, 0x53	; 83
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	a3 e5       	ldi	r26, 0x53	; 83
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e3 e5       	ldi	r30, 0x53	; 83
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 7e       	andi	r24, 0xEF	; 239
    17a8:	8c 93       	st	X, r24
    17aa:	8c 91       	ld	r24, X
    17ac:	f9 01       	movw	r30, r18
    17ae:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    17b0:	23 e5       	ldi	r18, 0x53	; 83
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	a3 e5       	ldi	r26, 0x53	; 83
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e3 e5       	ldi	r30, 0x53	; 83
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7d       	andi	r24, 0xDF	; 223
    17c0:	8c 93       	st	X, r24
    17c2:	8c 91       	ld	r24, X
    17c4:	f9 01       	movw	r30, r18
    17c6:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	82 85       	ldd	r24, Z+10	; 0x0a
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3c 8b       	std	Y+20, r19	; 0x14
    17d4:	2b 8b       	std	Y+19, r18	; 0x13
    17d6:	8b 89       	ldd	r24, Y+19	; 0x13
    17d8:	9c 89       	ldd	r25, Y+20	; 0x14
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	31 f0       	breq	.+12     	; 0x17ea <Timer_init+0xf8>
    17de:	eb 89       	ldd	r30, Y+19	; 0x13
    17e0:	fc 89       	ldd	r31, Y+20	; 0x14
    17e2:	e1 30       	cpi	r30, 0x01	; 1
    17e4:	f1 05       	cpc	r31, r1
    17e6:	91 f1       	breq	.+100    	; 0x184c <Timer_init+0x15a>
    17e8:	07 c2       	rjmp	.+1038   	; 0x1bf8 <Timer_init+0x506>
			/*
			 * Normal Overflow mode:
			 *                      Clear WGM00 bit in TCCR0 register
			 *                      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    17ea:	23 e5       	ldi	r18, 0x53	; 83
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	a3 e5       	ldi	r26, 0x53	; 83
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e3 e5       	ldi	r30, 0x53	; 83
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7b       	andi	r24, 0xBF	; 191
    17fa:	8c 93       	st	X, r24
    17fc:	8c 91       	ld	r24, X
    17fe:	f9 01       	movw	r30, r18
    1800:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    1802:	23 e5       	ldi	r18, 0x53	; 83
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	a3 e5       	ldi	r26, 0x53	; 83
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e3 e5       	ldi	r30, 0x53	; 83
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	87 7f       	andi	r24, 0xF7	; 247
    1812:	8c 93       	st	X, r24
    1814:	8c 91       	ld	r24, X
    1816:	f9 01       	movw	r30, r18
    1818:	80 83       	st	Z, r24

			/*
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    181a:	23 e5       	ldi	r18, 0x53	; 83
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	a3 e5       	ldi	r26, 0x53	; 83
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e3 e5       	ldi	r30, 0x53	; 83
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 68       	ori	r24, 0x80	; 128
    182a:	8c 93       	st	X, r24
    182c:	8c 91       	ld	r24, X
    182e:	f9 01       	movw	r30, r18
    1830:	80 83       	st	Z, r24


			/*
			 * Enable Timer0 overflow interrupt
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    1832:	29 e5       	ldi	r18, 0x59	; 89
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	a9 e5       	ldi	r26, 0x59	; 89
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e9 e5       	ldi	r30, 0x59	; 89
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	81 60       	ori	r24, 0x01	; 1
    1842:	8c 93       	st	X, r24
    1844:	8c 91       	ld	r24, X
    1846:	f9 01       	movw	r30, r18
    1848:	80 83       	st	Z, r24
    184a:	d6 c1       	rjmp	.+940    	; 0x1bf8 <Timer_init+0x506>
			/*
			 * Compare mode:
			 *              Clear WGM00 bit in TCCR0 register
			 *              Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    184c:	23 e5       	ldi	r18, 0x53	; 83
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	a3 e5       	ldi	r26, 0x53	; 83
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e3 e5       	ldi	r30, 0x53	; 83
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8f 7b       	andi	r24, 0xBF	; 191
    185c:	8c 93       	st	X, r24
    185e:	8c 91       	ld	r24, X
    1860:	f9 01       	movw	r30, r18
    1862:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    1864:	23 e5       	ldi	r18, 0x53	; 83
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	a3 e5       	ldi	r26, 0x53	; 83
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e3 e5       	ldi	r30, 0x53	; 83
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 60       	ori	r24, 0x08	; 8
    1874:	8c 93       	st	X, r24
    1876:	8c 91       	ld	r24, X
    1878:	f9 01       	movw	r30, r18
    187a:	80 83       	st	Z, r24

			/*
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    187c:	23 e5       	ldi	r18, 0x53	; 83
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a3 e5       	ldi	r26, 0x53	; 83
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e3 e5       	ldi	r30, 0x53	; 83
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 68       	ori	r24, 0x80	; 128
    188c:	8c 93       	st	X, r24
    188e:	8c 91       	ld	r24, X
    1890:	f9 01       	movw	r30, r18
    1892:	80 83       	st	Z, r24

			/*
			 * Configure initial value for Timer0 to start count from it
			 * 0XFF so that value doesn't exceed 8_bits
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    1894:	2c e5       	ldi	r18, 0x5C	; 92
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	e9 81       	ldd	r30, Y+1	; 0x01
    189a:	fa 81       	ldd	r31, Y+2	; 0x02
    189c:	84 81       	ldd	r24, Z+4	; 0x04
    189e:	95 81       	ldd	r25, Z+5	; 0x05
    18a0:	a6 81       	ldd	r26, Z+6	; 0x06
    18a2:	b7 81       	ldd	r27, Z+7	; 0x07
    18a4:	f9 01       	movw	r30, r18
    18a6:	80 83       	st	Z, r24

			/*
			 * Enable Timer0 compare match interrupt
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    18a8:	29 e5       	ldi	r18, 0x59	; 89
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	a9 e5       	ldi	r26, 0x59	; 89
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e9 e5       	ldi	r30, 0x59	; 89
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	82 60       	ori	r24, 0x02	; 2
    18b8:	8c 93       	st	X, r24
    18ba:	8c 91       	ld	r24, X
    18bc:	f9 01       	movw	r30, r18
    18be:	80 83       	st	Z, r24
    18c0:	9b c1       	rjmp	.+822    	; 0x1bf8 <Timer_init+0x506>


		case Timer1:

			/*Clear registers of Timer1 before accessing any of them*/
			TIMER1_CONTROL_REGIRSTER_A        &= 0X00;
    18c2:	ef e4       	ldi	r30, 0x4F	; 79
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	20 81       	ld	r18, Z
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	10 82       	st	Z, r1
			TIMER1_CONTROL_REGIRSTER_B        &= 0X00;
    18ce:	ee e4       	ldi	r30, 0x4E	; 78
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	30 81       	ld	r19, Z
    18d4:	ee e4       	ldi	r30, 0x4E	; 78
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	10 82       	st	Z, r1
			TIMER1_INITIAL_VALUE_REGISTER     &= 0X00;
    18da:	ec e4       	ldi	r30, 0x4C	; 76
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	ec e4       	ldi	r30, 0x4C	; 76
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	11 82       	std	Z+1, r1	; 0x01
    18e8:	10 82       	st	Z, r1
			TIMER1_OUTPUT_COMPARE_REGISTER_A  &= 0X00;
    18ea:	ea e4       	ldi	r30, 0x4A	; 74
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	20 81       	ld	r18, Z
    18f0:	31 81       	ldd	r19, Z+1	; 0x01
    18f2:	ea e4       	ldi	r30, 0x4A	; 74
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	11 82       	std	Z+1, r1	; 0x01
    18f8:	10 82       	st	Z, r1
			TIMER1_INTERRUPT_MASK_REGISTER    &= 0X00;
    18fa:	e9 e5       	ldi	r30, 0x59	; 89
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	30 81       	ld	r19, Z
    1900:	e9 e5       	ldi	r30, 0x59	; 89
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	10 82       	st	Z, r1

			/*
			 * Configure initial value for Timer1 to start count from it
			 * 0XFFFF so that value doesn't exceed 16_bits
			 */
			TIMER1_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    1906:	2c e4       	ldi	r18, 0x4C	; 76
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	a2 81       	ldd	r26, Z+2	; 0x02
    1914:	b3 81       	ldd	r27, Z+3	; 0x03
    1916:	f9 01       	movw	r30, r18
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
			/*
			 * TIMER Pre-scaler value for Timer1 in TCCR1B Register
			 * 0XF8 to make sure that the least 3-bits in TCCR1B register=0
			 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
			 */
			TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & 0XF8) | (Config_Ptr->timer_clock);
    191c:	ae e4       	ldi	r26, 0x4E	; 78
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ee e4       	ldi	r30, 0x4E	; 78
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	98 2f       	mov	r25, r24
    1928:	98 7f       	andi	r25, 0xF8	; 248
    192a:	e9 81       	ldd	r30, Y+1	; 0x01
    192c:	fa 81       	ldd	r31, Y+2	; 0x02
    192e:	81 85       	ldd	r24, Z+9	; 0x09
    1930:	89 2b       	or	r24, r25
    1932:	8c 93       	st	X, r24
			 * Compare mode:
			 *              OC1A/OC1B disconnected
			 *              Clear COM1A0/COM1A1 bits in TCCR1A register
			 *              Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0X0F;
    1934:	af e4       	ldi	r26, 0x4F	; 79
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e4       	ldi	r30, 0x4F	; 79
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8f 70       	andi	r24, 0x0F	; 15
    1940:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	82 85       	ldd	r24, Z+10	; 0x0a
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3b 87       	std	Y+11, r19	; 0x0b
    194e:	2a 87       	std	Y+10, r18	; 0x0a
    1950:	8a 85       	ldd	r24, Y+10	; 0x0a
    1952:	9b 85       	ldd	r25, Y+11	; 0x0b
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	31 f0       	breq	.+12     	; 0x1964 <Timer_init+0x272>
    1958:	ea 85       	ldd	r30, Y+10	; 0x0a
    195a:	fb 85       	ldd	r31, Y+11	; 0x0b
    195c:	e1 30       	cpi	r30, 0x01	; 1
    195e:	f1 05       	cpc	r31, r1
    1960:	a1 f1       	breq	.+104    	; 0x19ca <Timer_init+0x2d8>
    1962:	4a c1       	rjmp	.+660    	; 0x1bf8 <Timer_init+0x506>
				/*
				 * Normal Overflow mode:
				 *                      Clear WGM10/WMG11 bit in TCCR1A register
				 *                      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    1964:	af e4       	ldi	r26, 0x4F	; 79
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	ef e4       	ldi	r30, 0x4F	; 79
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8c 7f       	andi	r24, 0xFC	; 252
    1970:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = TIMER1_CONTROL_REGIRSTER_B & 0XE7 ;
    1972:	ae e4       	ldi	r26, 0x4E	; 78
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ee e4       	ldi	r30, 0x4E	; 78
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	87 7e       	andi	r24, 0xE7	; 231
    197e:	8c 93       	st	X, r24

				/*
				 * Make FOC1A/FOC1B to be Active as it is overflow mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    1980:	2f e4       	ldi	r18, 0x4F	; 79
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	af e4       	ldi	r26, 0x4F	; 79
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ef e4       	ldi	r30, 0x4F	; 79
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	8c 93       	st	X, r24
    1992:	8c 91       	ld	r24, X
    1994:	f9 01       	movw	r30, r18
    1996:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    1998:	2f e4       	ldi	r18, 0x4F	; 79
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	af e4       	ldi	r26, 0x4F	; 79
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ef e4       	ldi	r30, 0x4F	; 79
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	84 60       	ori	r24, 0x04	; 4
    19a8:	8c 93       	st	X, r24
    19aa:	8c 91       	ld	r24, X
    19ac:	f9 01       	movw	r30, r18
    19ae:	80 83       	st	Z, r24


				/*
				 * Enable Timer1 overflow interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    19b0:	29 e5       	ldi	r18, 0x59	; 89
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	a9 e5       	ldi	r26, 0x59	; 89
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e9 e5       	ldi	r30, 0x59	; 89
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	84 60       	ori	r24, 0x04	; 4
    19c0:	8c 93       	st	X, r24
    19c2:	8c 91       	ld	r24, X
    19c4:	f9 01       	movw	r30, r18
    19c6:	80 83       	st	Z, r24
    19c8:	17 c1       	rjmp	.+558    	; 0x1bf8 <Timer_init+0x506>
				 *  Compare mode:
				 *              Clear WGM10/WGM11 bits in TCCR1A register
				 *              Set WGM12 bit in TCCR1B register
				 *              Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8c 7f       	andi	r24, 0xFC	; 252
    19d6:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    19d8:	2e e4       	ldi	r18, 0x4E	; 78
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	ae e4       	ldi	r26, 0x4E	; 78
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ee e4       	ldi	r30, 0x4E	; 78
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	88 60       	ori	r24, 0x08	; 8
    19e8:	8c 93       	st	X, r24
    19ea:	8c 91       	ld	r24, X
    19ec:	f9 01       	movw	r30, r18
    19ee:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B = CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    19f0:	2e e4       	ldi	r18, 0x4E	; 78
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	ae e4       	ldi	r26, 0x4E	; 78
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ee e4       	ldi	r30, 0x4E	; 78
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7e       	andi	r24, 0xEF	; 239
    1a00:	8c 93       	st	X, r24
    1a02:	8c 91       	ld	r24, X
    1a04:	f9 01       	movw	r30, r18
    1a06:	80 83       	st	Z, r24

				/*
				 *  Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    1a08:	2f e4       	ldi	r18, 0x4F	; 79
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	af e4       	ldi	r26, 0x4F	; 79
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ef e4       	ldi	r30, 0x4F	; 79
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	88 60       	ori	r24, 0x08	; 8
    1a18:	8c 93       	st	X, r24
    1a1a:	8c 91       	ld	r24, X
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    1a20:	2f e4       	ldi	r18, 0x4F	; 79
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	af e4       	ldi	r26, 0x4F	; 79
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ef e4       	ldi	r30, 0x4F	; 79
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	84 60       	ori	r24, 0x04	; 4
    1a30:	8c 93       	st	X, r24
    1a32:	8c 91       	ld	r24, X
    1a34:	f9 01       	movw	r30, r18
    1a36:	80 83       	st	Z, r24

				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * 0XFFFF so that value doesn't exceed 16_bits
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    1a38:	2a e4       	ldi	r18, 0x4A	; 74
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	84 81       	ldd	r24, Z+4	; 0x04
    1a42:	95 81       	ldd	r25, Z+5	; 0x05
    1a44:	a6 81       	ldd	r26, Z+6	; 0x06
    1a46:	b7 81       	ldd	r27, Z+7	; 0x07
    1a48:	f9 01       	movw	r30, r18
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 compare match interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    1a4e:	29 e5       	ldi	r18, 0x59	; 89
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	a9 e5       	ldi	r26, 0x59	; 89
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e9 e5       	ldi	r30, 0x59	; 89
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 61       	ori	r24, 0x10	; 16
    1a5e:	8c 93       	st	X, r24
    1a60:	8c 91       	ld	r24, X
    1a62:	f9 01       	movw	r30, r18
    1a64:	80 83       	st	Z, r24
    1a66:	c8 c0       	rjmp	.+400    	; 0x1bf8 <Timer_init+0x506>


			case Timer2:

				/*Clear registers of Timer0 before accessing any of them*/
				TIMER2_CONTROL_REGIRSTER        &= 0X00;
    1a68:	e5 e4       	ldi	r30, 0x45	; 69
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	20 81       	ld	r18, Z
    1a6e:	e5 e4       	ldi	r30, 0x45	; 69
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	10 82       	st	Z, r1
				TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    1a74:	e4 e4       	ldi	r30, 0x44	; 68
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	30 81       	ld	r19, Z
    1a7a:	e4 e4       	ldi	r30, 0x44	; 68
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	10 82       	st	Z, r1
				TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    1a80:	e3 e4       	ldi	r30, 0x43	; 67
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	e3 e4       	ldi	r30, 0x43	; 67
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	10 82       	st	Z, r1
				TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    1a8c:	e9 e5       	ldi	r30, 0x59	; 89
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	90 81       	ld	r25, Z
    1a92:	e9 e5       	ldi	r30, 0x59	; 89
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	10 82       	st	Z, r1
				ASSR  &= 0X00;
    1a98:	e2 e4       	ldi	r30, 0x42	; 66
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	20 81       	ld	r18, Z
    1a9e:	e2 e4       	ldi	r30, 0x42	; 66
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	10 82       	st	Z, r1
				/*
				 * Configure initial value for Timer2 to start count from it
				 * 0XFF so that value doesn't exceed 8_bits
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    1aa4:	24 e4       	ldi	r18, 0x44	; 68
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab2:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	80 83       	st	Z, r24
				/*
				 * TIMER Pre-scaler value for Timer2 in TCCR2 Register
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
				 */
				TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    1ab8:	a5 e4       	ldi	r26, 0x45	; 69
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e4       	ldi	r30, 0x45	; 69
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	98 7f       	andi	r25, 0xF8	; 248
    1ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aca:	81 85       	ldd	r24, Z+9	; 0x09
    1acc:	89 2b       	or	r24, r25
    1ace:	8c 93       	st	X, r24
				 *  Compare mode:
				 *              OC2 disconnected
				 *              Clear COM20 bit in TCCR2 register
				 *              Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    1ad0:	25 e4       	ldi	r18, 0x45	; 69
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	a5 e4       	ldi	r26, 0x45	; 69
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e4       	ldi	r30, 0x45	; 69
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7e       	andi	r24, 0xEF	; 239
    1ae0:	8c 93       	st	X, r24
    1ae2:	8c 91       	ld	r24, X
    1ae4:	f9 01       	movw	r30, r18
    1ae6:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    1ae8:	25 e4       	ldi	r18, 0x45	; 69
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	a5 e4       	ldi	r26, 0x45	; 69
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e4       	ldi	r30, 0x45	; 69
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 7d       	andi	r24, 0xDF	; 223
    1af8:	8c 93       	st	X, r24
    1afa:	8c 91       	ld	r24, X
    1afc:	f9 01       	movw	r30, r18
    1afe:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	82 85       	ldd	r24, Z+10	; 0x0a
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3c 83       	std	Y+4, r19	; 0x04
    1b0c:	2b 83       	std	Y+3, r18	; 0x03
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <Timer_init+0x430>
    1b16:	eb 81       	ldd	r30, Y+3	; 0x03
    1b18:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1a:	e1 30       	cpi	r30, 0x01	; 1
    1b1c:	f1 05       	cpc	r31, r1
    1b1e:	91 f1       	breq	.+100    	; 0x1b84 <Timer_init+0x492>
    1b20:	6b c0       	rjmp	.+214    	; 0x1bf8 <Timer_init+0x506>
					/*
					 * Normal Overflow mode:
					 *                      Clear WGM00 bit in TCCR0 register
					 *                      Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    1b22:	25 e4       	ldi	r18, 0x45	; 69
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	a5 e4       	ldi	r26, 0x45	; 69
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e5 e4       	ldi	r30, 0x45	; 69
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8f 7b       	andi	r24, 0xBF	; 191
    1b32:	8c 93       	st	X, r24
    1b34:	8c 91       	ld	r24, X
    1b36:	f9 01       	movw	r30, r18
    1b38:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    1b3a:	25 e4       	ldi	r18, 0x45	; 69
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	a5 e4       	ldi	r26, 0x45	; 69
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e4       	ldi	r30, 0x45	; 69
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	8c 93       	st	X, r24
    1b4c:	8c 91       	ld	r24, X
    1b4e:	f9 01       	movw	r30, r18
    1b50:	80 83       	st	Z, r24

					/*
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    1b52:	25 e4       	ldi	r18, 0x45	; 69
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	a5 e4       	ldi	r26, 0x45	; 69
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e5 e4       	ldi	r30, 0x45	; 69
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 68       	ori	r24, 0x80	; 128
    1b62:	8c 93       	st	X, r24
    1b64:	8c 91       	ld	r24, X
    1b66:	f9 01       	movw	r30, r18
    1b68:	80 83       	st	Z, r24


					/*
					 * Enable Timer2 overflow interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    1b6a:	29 e5       	ldi	r18, 0x59	; 89
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	a9 e5       	ldi	r26, 0x59	; 89
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e9 e5       	ldi	r30, 0x59	; 89
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 64       	ori	r24, 0x40	; 64
    1b7a:	8c 93       	st	X, r24
    1b7c:	8c 91       	ld	r24, X
    1b7e:	f9 01       	movw	r30, r18
    1b80:	80 83       	st	Z, r24
    1b82:	3a c0       	rjmp	.+116    	; 0x1bf8 <Timer_init+0x506>
					/*
					 *  Compare mode:
					 *               Clear WGM20 bit in TCCR2 register
					 *               Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    1b84:	25 e4       	ldi	r18, 0x45	; 69
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	a5 e4       	ldi	r26, 0x45	; 69
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e4       	ldi	r30, 0x45	; 69
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7b       	andi	r24, 0xBF	; 191
    1b94:	8c 93       	st	X, r24
    1b96:	8c 91       	ld	r24, X
    1b98:	f9 01       	movw	r30, r18
    1b9a:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    1b9c:	25 e4       	ldi	r18, 0x45	; 69
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	a5 e4       	ldi	r26, 0x45	; 69
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e4       	ldi	r30, 0x45	; 69
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	8c 93       	st	X, r24
    1bae:	8c 91       	ld	r24, X
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	80 83       	st	Z, r24

					/*
					 *  Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    1bb4:	25 e4       	ldi	r18, 0x45	; 69
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	a5 e4       	ldi	r26, 0x45	; 69
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e5 e4       	ldi	r30, 0x45	; 69
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 68       	ori	r24, 0x80	; 128
    1bc4:	8c 93       	st	X, r24
    1bc6:	8c 91       	ld	r24, X
    1bc8:	f9 01       	movw	r30, r18
    1bca:	80 83       	st	Z, r24
					/*
					 * Configure compare match value for Timer2 to start count from it
					 * 0XFF so that value doesn't exceed 8_bits
					 */

					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    1bcc:	23 e4       	ldi	r18, 0x43	; 67
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd4:	84 81       	ldd	r24, Z+4	; 0x04
    1bd6:	95 81       	ldd	r25, Z+5	; 0x05
    1bd8:	a6 81       	ldd	r26, Z+6	; 0x06
    1bda:	b7 81       	ldd	r27, Z+7	; 0x07
    1bdc:	f9 01       	movw	r30, r18
    1bde:	80 83       	st	Z, r24

					/*
					 * Enable Timer2 compare match interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    1be0:	29 e5       	ldi	r18, 0x59	; 89
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	a9 e5       	ldi	r26, 0x59	; 89
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e9 e5       	ldi	r30, 0x59	; 89
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 68       	ori	r24, 0x80	; 128
    1bf0:	8c 93       	st	X, r24
    1bf2:	8c 91       	ld	r24, X
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	80 83       	st	Z, r24

				break; /*End of Timer2*/

	}/*End of Super switch case*/

}/*End of the Timer_init*/
    1bf8:	6a 96       	adiw	r28, 0x1a	; 26
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <Timer_setCallBack>:
 *                             To use it to choose the type of the timer
 *
 * [Returns]:      VOID
 ***************************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <Timer_setCallBack+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <Timer_setCallBack+0x8>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3d 83       	std	Y+5, r19	; 0x05
    1c26:	2c 83       	std	Y+4, r18	; 0x04
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <Timer_setCallBack+0x48>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	91 f0       	breq	.+36     	; 0x1c60 <Timer_setCallBack+0x56>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	a1 f4       	brne	.+40     	; 0x1c6c <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	90 93 7f 00 	sts	0x007F, r25
    1c4c:	80 93 7e 00 	sts	0x007E, r24
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	90 93 81 00 	sts	0x0081, r25
    1c5a:	80 93 80 00 	sts	0x0080, r24
    1c5e:	06 c0       	rjmp	.+12     	; 0x1c6c <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	90 93 83 00 	sts	0x0083, r25
    1c68:	80 93 82 00 	sts	0x0082, r24
		break;
	}

}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <Timer_stop>:
 * [Returns]:      VOID
 ***************************************************************************************************/


void Timer_stop(Timer_Type timer_type)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <Timer_stop+0x6>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01

	switch(timer_type)
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	3b 83       	std	Y+3, r19	; 0x03
    1c92:	2a 83       	std	Y+2, r18	; 0x02
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	89 f0       	breq	.+34     	; 0x1cc0 <Timer_stop+0x44>
    1c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	a1 f0       	breq	.+40     	; 0x1cd0 <Timer_stop+0x54>
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	b9 f4       	brne	.+46     	; 0x1cde <Timer_stop+0x62>
	case Timer0:
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) ;
    1cb0:	a3 e5       	ldi	r26, 0x53	; 83
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e3 e5       	ldi	r30, 0x53	; 83
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	88 7f       	andi	r24, 0xF8	; 248
    1cbc:	8c 93       	st	X, r24
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <Timer_stop+0x62>

		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & 0XF8) ;
    1cc0:	ae e4       	ldi	r26, 0x4E	; 78
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ee e4       	ldi	r30, 0x4E	; 78
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 7f       	andi	r24, 0xF8	; 248
    1ccc:	8c 93       	st	X, r24
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <Timer_stop+0x62>
	case Timer2:
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) ;
    1cd0:	a5 e4       	ldi	r26, 0x45	; 69
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e5 e4       	ldi	r30, 0x45	; 69
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 7f       	andi	r24, 0xF8	; 248
    1cdc:	8c 93       	st	X, r24
		break;

	}


}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <Timer_DeInit>:
 *
 * [Returns]:      VOID
 ***************************************************************************************************/

void Timer_DeInit(Timer_Type timer_type)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	62 97       	sbiw	r28, 0x12	; 18
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	3a 8b       	std	Y+18, r19	; 0x12
    1d08:	29 8b       	std	Y+17, r18	; 0x11
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	21 f1       	breq	.+72     	; 0x1d5c <Timer_DeInit+0x72>
    1d14:	29 89       	ldd	r18, Y+17	; 0x11
    1d16:	3a 89       	ldd	r19, Y+18	; 0x12
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <Timer_DeInit+0x36>
    1d1e:	41 c0       	rjmp	.+130    	; 0x1da2 <Timer_DeInit+0xb8>
    1d20:	89 89       	ldd	r24, Y+17	; 0x11
    1d22:	9a 89       	ldd	r25, Y+18	; 0x12
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <Timer_DeInit+0x40>
    1d28:	54 c0       	rjmp	.+168    	; 0x1dd2 <Timer_DeInit+0xe8>
	{
	case Timer0:

		/*Clear all register in Timer0*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    1d2a:	e3 e5       	ldi	r30, 0x53	; 83
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	90 81       	ld	r25, Z
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    1d36:	e2 e5       	ldi	r30, 0x52	; 82
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	20 81       	ld	r18, Z
    1d3c:	e2 e5       	ldi	r30, 0x52	; 82
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    1d42:	ec e5       	ldi	r30, 0x5C	; 92
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	30 81       	ld	r19, Z
    1d48:	ec e5       	ldi	r30, 0x5C	; 92
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    1d4e:	e9 e5       	ldi	r30, 0x59	; 89
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	e9 e5       	ldi	r30, 0x59	; 89
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	10 82       	st	Z, r1
    1d5a:	3b c0       	rjmp	.+118    	; 0x1dd2 <Timer_DeInit+0xe8>
		break;

	case Timer1:

		/*Clear all register in Timer1*/
		TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    1d5c:	ef e4       	ldi	r30, 0x4F	; 79
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	90 81       	ld	r25, Z
    1d62:	ef e4       	ldi	r30, 0x4F	; 79
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    1d68:	ee e4       	ldi	r30, 0x4E	; 78
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	20 81       	ld	r18, Z
    1d6e:	ee e4       	ldi	r30, 0x4E	; 78
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    1d74:	ec e4       	ldi	r30, 0x4C	; 76
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	ec e4       	ldi	r30, 0x4C	; 76
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    1d84:	ea e4       	ldi	r30, 0x4A	; 74
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	20 81       	ld	r18, Z
    1d8a:	31 81       	ldd	r19, Z+1	; 0x01
    1d8c:	ea e4       	ldi	r30, 0x4A	; 74
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	11 82       	std	Z+1, r1	; 0x01
    1d92:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    1d94:	e9 e5       	ldi	r30, 0x59	; 89
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	30 81       	ld	r19, Z
    1d9a:	e9 e5       	ldi	r30, 0x59	; 89
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	10 82       	st	Z, r1
    1da0:	18 c0       	rjmp	.+48     	; 0x1dd2 <Timer_DeInit+0xe8>


	case Timer2:

		/*Clear all register in Timer2*/
		TIMER2_CONTROL_REGIRSTER        &= 0X00;
    1da2:	e5 e4       	ldi	r30, 0x45	; 69
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	e5 e4       	ldi	r30, 0x45	; 69
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    1dae:	e4 e4       	ldi	r30, 0x44	; 68
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	90 81       	ld	r25, Z
    1db4:	e4 e4       	ldi	r30, 0x44	; 68
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	10 82       	st	Z, r1
		TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    1dba:	e3 e4       	ldi	r30, 0x43	; 67
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	20 81       	ld	r18, Z
    1dc0:	e3 e4       	ldi	r30, 0x43	; 67
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    1dc6:	e9 e5       	ldi	r30, 0x59	; 89
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	30 81       	ld	r19, Z
    1dcc:	e9 e5       	ldi	r30, 0x59	; 89
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	10 82       	st	Z, r1
		break;

	}

}
    1dd2:	62 96       	adiw	r28, 0x12	; 18
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <UART_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_config * Config_Ptr)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <UART_init+0x6>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1df2:	eb e2       	ldi	r30, 0x2B	; 43
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    1dfa:	aa e2       	ldi	r26, 0x2A	; 42
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	ea e2       	ldi	r30, 0x2A	; 42
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 61       	ori	r24, 0x18	; 24
    1e06:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit , 1 Two stop bit
	 * UCSZ1:0 =  00 For 5-bit data mode ,01 For 6-bit data mode , 10 For 7-bit data mode,
	 *             11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
    1e08:	a0 e4       	ldi	r26, 0x40	; 64
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e0 e4       	ldi	r30, 0x40	; 64
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 68       	ori	r24, 0x80	; 128
    1e14:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xBF ) | ( (Config_Ptr->mode) << 6);
    1e16:	a0 e4       	ldi	r26, 0x40	; 64
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e0 e4       	ldi	r30, 0x40	; 64
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	28 2f       	mov	r18, r24
    1e22:	2f 7b       	andi	r18, 0xBF	; 191
    1e24:	e9 81       	ldd	r30, Y+1	; 0x01
    1e26:	fa 81       	ldd	r31, Y+2	; 0x02
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	00 24       	eor	r0, r0
    1e30:	96 95       	lsr	r25
    1e32:	87 95       	ror	r24
    1e34:	07 94       	ror	r0
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	07 94       	ror	r0
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	80 2d       	mov	r24, r0
    1e40:	82 2b       	or	r24, r18
    1e42:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity) << 4);
    1e44:	a0 e4       	ldi	r26, 0x40	; 64
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e0 e4       	ldi	r30, 0x40	; 64
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	28 2f       	mov	r18, r24
    1e50:	2f 7c       	andi	r18, 0xCF	; 207
    1e52:	e9 81       	ldd	r30, Y+1	; 0x01
    1e54:	fa 81       	ldd	r31, Y+2	; 0x02
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	82 95       	swap	r24
    1e5e:	92 95       	swap	r25
    1e60:	90 7f       	andi	r25, 0xF0	; 240
    1e62:	98 27       	eor	r25, r24
    1e64:	80 7f       	andi	r24, 0xF0	; 240
    1e66:	98 27       	eor	r25, r24
    1e68:	82 2b       	or	r24, r18
    1e6a:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stop) << 3);
    1e6c:	a0 e4       	ldi	r26, 0x40	; 64
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e0 e4       	ldi	r30, 0x40	; 64
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	28 2f       	mov	r18, r24
    1e78:	27 7f       	andi	r18, 0xF7	; 247
    1e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	82 2b       	or	r24, r18
    1e92:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->size) << 1);
    1e94:	a0 e4       	ldi	r26, 0x40	; 64
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e0 e4       	ldi	r30, 0x40	; 64
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	29 7f       	andi	r18, 0xF9	; 249
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	82 2b       	or	r24, r18
    1eb2:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xFE ) | ( Config_Ptr->mode );
    1eb4:	a0 e4       	ldi	r26, 0x40	; 64
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e0 e4       	ldi	r30, 0x40	; 64
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	9e 7f       	andi	r25, 0xFE	; 254
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	80 81       	ld	r24, Z
    1ec8:	89 2b       	or	r24, r25
    1eca:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    1ecc:	e0 e4       	ldi	r30, 0x40	; 64
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    1ed2:	e9 e2       	ldi	r30, 0x29	; 41
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	8c e0       	ldi	r24, 0x0C	; 12
    1ed8:	80 83       	st	Z, r24
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <UART_sendByte>:

void UART_sendByte(const uint8 data)

{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	0f 92       	push	r0
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
#ifndef INTERRUPTS_send
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ef0:	eb e2       	ldi	r30, 0x2B	; 43
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	80 72       	andi	r24, 0x20	; 32
    1efc:	90 70       	andi	r25, 0x00	; 0
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	b9 f3       	breq	.-18     	; 0x1ef0 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1f02:	ec e2       	ldi	r30, 0x2C	; 44
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	80 83       	st	Z, r24
	 *******************************************************************/
#endif
#ifdef INTERRUPTS_send
 g_UART_dataToSend=data;
#endif
}
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
#ifndef INTERRUPTS_recieve
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f1a:	eb e2       	ldi	r30, 0x2B	; 43
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	dc f7       	brge	.-10     	; 0x1f1a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data automatically */
	return UDR;
    1f24:	ec e2       	ldi	r30, 0x2C	; 44
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
#else

	return g_UART_dataRecieved;

#endif
}
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <UART_sendString+0x6>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f40:	19 82       	std	Y+1, r1	; 0x01
    1f42:	0e c0       	rjmp	.+28     	; 0x1f60 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	80 81       	ld	r24, Z
    1f56:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <UART_sendByte>
		i++;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	80 81       	ld	r24, Z
    1f72:	88 23       	and	r24, r24
    1f74:	39 f7       	brne	.-50     	; 0x1f44 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <UART_receiveString+0xa>
    1f8c:	0f 92       	push	r0
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	9b 83       	std	Y+3, r25	; 0x03
    1f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f96:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	02 0f       	add	r16, r18
    1fa6:	13 1f       	adc	r17, r19
    1fa8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 83       	st	Z, r24
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	8c 01       	movw	r16, r24
    1fc4:	02 0f       	add	r16, r18
    1fc6:	13 1f       	adc	r17, r19
    1fc8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <UART_recieveByte>
    1fcc:	f8 01       	movw	r30, r16
    1fce:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fda:	fc 01       	movw	r30, r24
    1fdc:	e2 0f       	add	r30, r18
    1fde:	f3 1f       	adc	r31, r19
    1fe0:	80 81       	ld	r24, Z
    1fe2:	83 32       	cpi	r24, 0x23	; 35
    1fe4:	31 f7       	brne	.-52     	; 0x1fb2 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	e2 0f       	add	r30, r18
    1ff4:	f3 1f       	adc	r31, r19
    1ff6:	10 82       	st	Z, r1
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <EEPROM_init>:

I2C_config I2C_CONFIGURATION = {NO_ACK,ZERO};


void EEPROM_init(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&I2C_CONFIGURATION,0b00000010);
    2010:	87 e7       	ldi	r24, 0x77	; 119
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	0e 94 b1 10 	call	0x2162	; 0x2162 <TWI_init>
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <EEPROM_writeByte+0x6>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <EEPROM_writeByte+0x8>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2032:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    2036:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    203a:	88 30       	cpi	r24, 0x08	; 8
    203c:	11 f0       	breq	.+4      	; 0x2042 <EEPROM_writeByte+0x22>
        return ERROR;
    203e:	1c 82       	std	Y+4, r1	; 0x04
    2040:	28 c0       	rjmp	.+80     	; 0x2092 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	80 70       	andi	r24, 0x00	; 0
    2048:	97 70       	andi	r25, 0x07	; 7
    204a:	88 0f       	add	r24, r24
    204c:	89 2f       	mov	r24, r25
    204e:	88 1f       	adc	r24, r24
    2050:	99 0b       	sbc	r25, r25
    2052:	91 95       	neg	r25
    2054:	80 6a       	ori	r24, 0xA0	; 160
    2056:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    205a:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    205e:	88 31       	cpi	r24, 0x18	; 24
    2060:	11 f0       	breq	.+4      	; 0x2066 <EEPROM_writeByte+0x46>
        return ERROR; 
    2062:	1c 82       	std	Y+4, r1	; 0x04
    2064:	16 c0       	rjmp	.+44     	; 0x2092 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    206c:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    2070:	88 32       	cpi	r24, 0x28	; 40
    2072:	11 f0       	breq	.+4      	; 0x2078 <EEPROM_writeByte+0x58>
        return ERROR;
    2074:	1c 82       	std	Y+4, r1	; 0x04
    2076:	0d c0       	rjmp	.+26     	; 0x2092 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    207e:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    2082:	88 32       	cpi	r24, 0x28	; 40
    2084:	11 f0       	breq	.+4      	; 0x208a <EEPROM_writeByte+0x6a>
        return ERROR;
    2086:	1c 82       	std	Y+4, r1	; 0x04
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    208a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_stop>
	
    return SUCCESS;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	8c 83       	std	Y+4, r24	; 0x04
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <EEPROM_readByte+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <EEPROM_readByte+0x8>
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	7c 83       	std	Y+4, r23	; 0x04
    20b6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20b8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    20bc:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    20c0:	88 30       	cpi	r24, 0x08	; 8
    20c2:	11 f0       	breq	.+4      	; 0x20c8 <EEPROM_readByte+0x26>
        return ERROR;
    20c4:	1d 82       	std	Y+5, r1	; 0x05
    20c6:	44 c0       	rjmp	.+136    	; 0x2150 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	80 70       	andi	r24, 0x00	; 0
    20ce:	97 70       	andi	r25, 0x07	; 7
    20d0:	88 0f       	add	r24, r24
    20d2:	89 2f       	mov	r24, r25
    20d4:	88 1f       	adc	r24, r24
    20d6:	99 0b       	sbc	r25, r25
    20d8:	91 95       	neg	r25
    20da:	80 6a       	ori	r24, 0xA0	; 160
    20dc:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    20e0:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    20e4:	88 31       	cpi	r24, 0x18	; 24
    20e6:	11 f0       	breq	.+4      	; 0x20ec <EEPROM_readByte+0x4a>
        return ERROR;
    20e8:	1d 82       	std	Y+5, r1	; 0x05
    20ea:	32 c0       	rjmp	.+100    	; 0x2150 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    20f2:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    20f6:	88 32       	cpi	r24, 0x28	; 40
    20f8:	11 f0       	breq	.+4      	; 0x20fe <EEPROM_readByte+0x5c>
        return ERROR;
    20fa:	1d 82       	std	Y+5, r1	; 0x05
    20fc:	29 c0       	rjmp	.+82     	; 0x2150 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    20fe:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    2102:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    2106:	80 31       	cpi	r24, 0x10	; 16
    2108:	11 f0       	breq	.+4      	; 0x210e <EEPROM_readByte+0x6c>
        return ERROR;
    210a:	1d 82       	std	Y+5, r1	; 0x05
    210c:	21 c0       	rjmp	.+66     	; 0x2150 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	80 70       	andi	r24, 0x00	; 0
    2114:	97 70       	andi	r25, 0x07	; 7
    2116:	88 0f       	add	r24, r24
    2118:	89 2f       	mov	r24, r25
    211a:	88 1f       	adc	r24, r24
    211c:	99 0b       	sbc	r25, r25
    211e:	91 95       	neg	r25
    2120:	81 6a       	ori	r24, 0xA1	; 161
    2122:	0e 94 03 11 	call	0x2206	; 0x2206 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    2126:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    212a:	80 34       	cpi	r24, 0x40	; 64
    212c:	11 f0       	breq	.+4      	; 0x2132 <EEPROM_readByte+0x90>
        return ERROR;
    212e:	1d 82       	std	Y+5, r1	; 0x05
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    2132:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_readWithNACK>
    2136:	eb 81       	ldd	r30, Y+3	; 0x03
    2138:	fc 81       	ldd	r31, Y+4	; 0x04
    213a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    213c:	0e 94 40 11 	call	0x2280	; 0x2280 <TWI_getStatus>
    2140:	88 35       	cpi	r24, 0x58	; 88
    2142:	11 f0       	breq	.+4      	; 0x2148 <EEPROM_readByte+0xa6>
        return ERROR;
    2144:	1d 82       	std	Y+5, r1	; 0x05
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2148:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <TWI_stop>
    return SUCCESS;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <TWI_init>:
 ***********************************************************************************/
#include "i2c.h"


void TWI_init(const I2C_config * Config_Ptr , uint8 myaddress)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	00 d0       	rcall	.+0      	; 0x2168 <TWI_init+0x6>
    2168:	0f 92       	push	r0
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	6b 83       	std	Y+3, r22	; 0x03
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	g_address=myaddress;
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	80 93 96 00 	sts	0x0096, r24
    TWBR = 0x02;
    217a:	e0 e2       	ldi	r30, 0x20	; 32
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	80 83       	st	Z, r24
	TWSR = ( TWSR & 0xFC ) | ( Config_Ptr->PRESCALER );
    2182:	a1 e2       	ldi	r26, 0x21	; 33
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e1 e2       	ldi	r30, 0x21	; 33
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	98 2f       	mov	r25, r24
    218e:	9c 7f       	andi	r25, 0xFC	; 252
    2190:	e9 81       	ldd	r30, Y+1	; 0x01
    2192:	fa 81       	ldd	r31, Y+2	; 0x02
    2194:	81 81       	ldd	r24, Z+1	; 0x01
    2196:	89 2b       	or	r24, r25
    2198:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = g_address; // my address = 0x01 = 0b00000010)
    219a:	e2 e2       	ldi	r30, 0x22	; 34
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 91 96 00 	lds	r24, 0x0096
    21a2:	80 83       	st	Z, r24

    TWCR = ( TWCR & 0x40) | (Config_Ptr->ACK);
    21a4:	a6 e5       	ldi	r26, 0x56	; 86
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e6 e5       	ldi	r30, 0x56	; 86
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	98 2f       	mov	r25, r24
    21b0:	90 74       	andi	r25, 0x40	; 64
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	80 81       	ld	r24, Z
    21b8:	89 2b       	or	r24, r25
    21ba:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    21bc:	e6 e5       	ldi	r30, 0x56	; 86
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	84 e0       	ldi	r24, 0x04	; 4
    21c2:	80 83       	st	Z, r24
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <TWI_start>:

void TWI_start(void)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21d8:	e6 e5       	ldi	r30, 0x56	; 86
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	84 ea       	ldi	r24, 0xA4	; 164
    21de:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21e0:	e6 e5       	ldi	r30, 0x56	; 86
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	88 23       	and	r24, r24
    21e8:	dc f7       	brge	.-10     	; 0x21e0 <TWI_start+0x10>
}
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <TWI_stop>:

void TWI_stop(void)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21f8:	e6 e5       	ldi	r30, 0x56	; 86
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	84 e9       	ldi	r24, 0x94	; 148
    21fe:	80 83       	st	Z, r24
}
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <TWI_write>:

void TWI_write(uint8 data)
{
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2212:	e3 e2       	ldi	r30, 0x23	; 35
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    221a:	e6 e5       	ldi	r30, 0x56	; 86
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	84 e8       	ldi	r24, 0x84	; 132
    2220:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2222:	e6 e5       	ldi	r30, 0x56	; 86
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 23       	and	r24, r24
    222a:	dc f7       	brge	.-10     	; 0x2222 <TWI_write+0x1c>
}
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    223c:	e6 e5       	ldi	r30, 0x56	; 86
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	84 ec       	ldi	r24, 0xC4	; 196
    2242:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2244:	e6 e5       	ldi	r30, 0x56	; 86
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	88 23       	and	r24, r24
    224c:	dc f7       	brge	.-10     	; 0x2244 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    224e:	e3 e2       	ldi	r30, 0x23	; 35
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2262:	e6 e5       	ldi	r30, 0x56	; 86
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	84 e8       	ldi	r24, 0x84	; 132
    2268:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    226a:	e6 e5       	ldi	r30, 0x56	; 86
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	88 23       	and	r24, r24
    2272:	dc f7       	brge	.-10     	; 0x226a <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2274:	e3 e2       	ldi	r30, 0x23	; 35
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    228a:	e1 e2       	ldi	r30, 0x21	; 33
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	88 7f       	andi	r24, 0xF8	; 248
    2292:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
}
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <__prologue_saves__>:
    229e:	2f 92       	push	r2
    22a0:	3f 92       	push	r3
    22a2:	4f 92       	push	r4
    22a4:	5f 92       	push	r5
    22a6:	6f 92       	push	r6
    22a8:	7f 92       	push	r7
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	ca 1b       	sub	r28, r26
    22c8:	db 0b       	sbc	r29, r27
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	09 94       	ijmp

000022d6 <__epilogue_restores__>:
    22d6:	2a 88       	ldd	r2, Y+18	; 0x12
    22d8:	39 88       	ldd	r3, Y+17	; 0x11
    22da:	48 88       	ldd	r4, Y+16	; 0x10
    22dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    22de:	6e 84       	ldd	r6, Y+14	; 0x0e
    22e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    22e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    22e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    22e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    22e8:	b9 84       	ldd	r11, Y+9	; 0x09
    22ea:	c8 84       	ldd	r12, Y+8	; 0x08
    22ec:	df 80       	ldd	r13, Y+7	; 0x07
    22ee:	ee 80       	ldd	r14, Y+6	; 0x06
    22f0:	fd 80       	ldd	r15, Y+5	; 0x05
    22f2:	0c 81       	ldd	r16, Y+4	; 0x04
    22f4:	1b 81       	ldd	r17, Y+3	; 0x03
    22f6:	aa 81       	ldd	r26, Y+2	; 0x02
    22f8:	b9 81       	ldd	r27, Y+1	; 0x01
    22fa:	ce 0f       	add	r28, r30
    22fc:	d1 1d       	adc	r29, r1
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	ed 01       	movw	r28, r26
    230a:	08 95       	ret

0000230c <_exit>:
    230c:	f8 94       	cli

0000230e <__stop_program>:
    230e:	ff cf       	rjmp	.-2      	; 0x230e <__stop_program>
