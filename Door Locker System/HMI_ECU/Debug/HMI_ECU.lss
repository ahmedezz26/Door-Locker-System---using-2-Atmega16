
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002f5c  00002ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800178  00800178  00003108  2**0
                  ALLOC
  3 .stab         00002a48  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127e  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000707e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b51b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__vector_3>
      10:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__vector_8>
      24:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e5       	ldi	r26, 0x5A	; 90
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e5       	ldi	r24, 0x5A	; 90
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 ***********************************************************************************/

#include "HMI_ECU.h"

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_init>

	UART_init(&UART_configuration);
     b5e:	82 e6       	ldi	r24, 0x62	; 98
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 20 15 	call	0x2a40	; 0x2a40 <UART_init>

	LCD_clearScreen();
     b66:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(ROW_ZERO,COLUMN_EIGHT,"DOOR LOCKER SYSTEM");
     b6a:	20 e6       	ldi	r18, 0x60	; 96
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	68 e0       	ldi	r22, 0x08	; 8
     b72:	a9 01       	movw	r20, r18
     b74:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(ROW_ONE,COLUMN_THIRTEEN,"WELCOME");
     b78:	23 e7       	ldi	r18, 0x73	; 115
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	6d e0       	ldi	r22, 0x0D	; 13
     b80:	a9 01       	movw	r20, r18
     b82:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	aa e7       	ldi	r26, 0x7A	; 122
     b8c:	b5 e4       	ldi	r27, 0x45	; 69
     b8e:	8b 87       	std	Y+11, r24	; 0x0b
     b90:	9c 87       	std	Y+12, r25	; 0x0c
     b92:	ad 87       	std	Y+13, r26	; 0x0d
     b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b96:	6b 85       	ldd	r22, Y+11	; 0x0b
     b98:	7c 85       	ldd	r23, Y+12	; 0x0c
     b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	4a e7       	ldi	r20, 0x7A	; 122
     ba4:	53 e4       	ldi	r21, 0x43	; 67
     ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8f 83       	std	Y+7, r24	; 0x07
     bb0:	98 87       	std	Y+8, r25	; 0x08
     bb2:	a9 87       	std	Y+9, r26	; 0x09
     bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <main+0x92>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9e 83       	std	Y+6, r25	; 0x06
     bd4:	8d 83       	std	Y+5, r24	; 0x05
     bd6:	3f c0       	rjmp	.+126    	; 0xc56 <main+0x110>
	else if (__tmp > 65535)
     bd8:	6f 81       	ldd	r22, Y+7	; 0x07
     bda:	78 85       	ldd	r23, Y+8	; 0x08
     bdc:	89 85       	ldd	r24, Y+9	; 0x09
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	57 e4       	ldi	r21, 0x47	; 71
     be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bec:	18 16       	cp	r1, r24
     bee:	4c f5       	brge	.+82     	; 0xc42 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e2       	ldi	r20, 0x20	; 32
     bfe:	51 e4       	ldi	r21, 0x41	; 65
     c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	9e 83       	std	Y+6, r25	; 0x06
     c16:	8d 83       	std	Y+5, r24	; 0x05
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <main+0xf2>
     c1a:	89 e1       	ldi	r24, 0x19	; 25
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	f1 f7       	brne	.-4      	; 0xc26 <main+0xe0>
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	9e 83       	std	Y+6, r25	; 0x06
     c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	69 f7       	brne	.-38     	; 0xc1a <main+0xd4>
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c42:	6f 81       	ldd	r22, Y+7	; 0x07
     c44:	78 85       	ldd	r23, Y+8	; 0x08
     c46:	89 85       	ldd	r24, Y+9	; 0x09
     c48:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	8d 81       	ldd	r24, Y+5	; 0x05
     c58:	9e 81       	ldd	r25, Y+6	; 0x06
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <main+0x11c>
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FOUR_SECONDS_DELAY);

	ifPassSavedORNOT();   /* to check either it's first time for the user to log in or no */
     c6a:	0e 94 8f 08 	call	0x111e	; 0x111e <ifPassSavedORNOT>

	SREG |= (1<<7);       /* Enable I-Bit for Interrupts */
     c6e:	af e5       	ldi	r26, 0x5F	; 95
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ef e5       	ldi	r30, 0x5F	; 95
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	80 68       	ori	r24, 0x80	; 128
     c7a:	8c 93       	st	X, r24

	while(1){
		(*ptr_states[g_stateNum])();   /* calling functions from the array of functions */
     c7c:	80 91 7d 01 	lds	r24, 0x017D
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	fc 01       	movw	r30, r24
     c8a:	ef 58       	subi	r30, 0x8F	; 143
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	01 90       	ld	r0, Z+
     c90:	f0 81       	ld	r31, Z
     c92:	e0 2d       	mov	r30, r0
     c94:	09 95       	icall
     c96:	f2 cf       	rjmp	.-28     	; 0xc7c <main+0x136>

00000c98 <createandStorePassword>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void createandStorePassword(void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <createandStorePassword+0x6>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	 * 3. START FILLING IN THE PASSWORD FROM THE USER TO A GLOBAL ARRAY
	 * 4. SEND COMMAND TO CONTROL_ECU (PASSWORD_SEND)
	 * 5. SENDING THE PASSWORD TO THE CONTROL_ECU AND IF IT MATCHES STORE IT
	 * 6. IF IT DOESN'T MATCH DISPLAY A MESSAGE ON SCREEN
	 */
	if(g_flag==0){
     ca2:	80 91 78 01 	lds	r24, 0x0178
     ca6:	88 23       	and	r24, r24
     ca8:	d9 f4       	brne	.+54     	; 0xce0 <createandStorePassword+0x48>
		LCD_clearScreen();
     caa:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_ZERO,"PLEASE ENTER NEW PASSWORD(5):");
     cae:	2b e7       	ldi	r18, 0x7B	; 123
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	a9 01       	movw	r20, r18
     cb8:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_goToRowColumn(ROW_ONE,COLUMN_TWELVE);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	6c e0       	ldi	r22, 0x0C	; 12
     cc0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_goToRowColumn>
		fillInPassword(g_password);
     cc4:	87 e8       	ldi	r24, 0x87	; 135
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 4f 09 	call	0x129e	; 0x129e <fillInPassword>
		sendCommand(PASSWORD_SEND);
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
		SendPassword(g_password);
     cd2:	87 e8       	ldi	r24, 0x87	; 135
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 b4 06 	call	0xd68	; 0xd68 <SendPassword>
		g_flag=1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 78 01 	sts	0x0178, r24
	}
	if(g_flag==1)
     ce0:	80 91 78 01 	lds	r24, 0x0178
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	d9 f4       	brne	.+54     	; 0xd1e <createandStorePassword+0x86>
	{
		LCD_clearScreen();
     ce8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_ZERO,"PLEASE RE-ENTER PASSWORD(5):");
     cec:	29 e9       	ldi	r18, 0x99	; 153
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	a9 01       	movw	r20, r18
     cf6:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_goToRowColumn(ROW_ONE,COLUMN_TWELVE);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	6c e0       	ldi	r22, 0x0C	; 12
     cfe:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_goToRowColumn>
		fillInPassword(g_password);
     d02:	87 e8       	ldi	r24, 0x87	; 135
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	0e 94 4f 09 	call	0x129e	; 0x129e <fillInPassword>
		sendCommand(PASSWORD_CONFIRMATION_SEND);
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
		SendPassword(g_password);
     d10:	87 e8       	ldi	r24, 0x87	; 135
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 b4 06 	call	0xd68	; 0xd68 <SendPassword>
		g_flag=2;
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	80 93 78 01 	sts	0x0178, r24
	}
	if (g_flag==2)
     d1e:	80 91 78 01 	lds	r24, 0x0178
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	e1 f4       	brne	.+56     	; 0xd5e <createandStorePassword+0xc6>
	{
		switch(recieveCommand())
     d26:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <recieveCommand>
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	3a 83       	std	Y+2, r19	; 0x02
     d30:	29 83       	std	Y+1, r18	; 0x01
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	91 05       	cpc	r25, r1
     d3a:	31 f0       	breq	.+12     	; 0xd48 <createandStorePassword+0xb0>
     d3c:	29 81       	ldd	r18, Y+1	; 0x01
     d3e:	3a 81       	ldd	r19, Y+2	; 0x02
     d40:	25 30       	cpi	r18, 0x05	; 5
     d42:	31 05       	cpc	r19, r1
     d44:	41 f0       	breq	.+16     	; 0xd56 <createandStorePassword+0xbe>
     d46:	0b c0       	rjmp	.+22     	; 0xd5e <createandStorePassword+0xc6>
		{
		case PASSWORD_MATCH:
			g_flag=3;
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	80 93 78 01 	sts	0x0178, r24
			g_stateNum=1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 7d 01 	sts	0x017D, r24
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <createandStorePassword+0xc6>
			break;

		case PASSWORD_NOT_MATCHED:
			PasswordDONTMATCHScreen();
     d56:	0e 94 11 0a 	call	0x1422	; 0x1422 <PasswordDONTMATCHScreen>
			g_flag=0;
     d5a:	10 92 78 01 	sts	0x0178, r1
			break;
		}
	}
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <SendPassword>:
 * [Arguments]:       ARRAY of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void SendPassword(uint8 a_arr[])
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <SendPassword+0x6>
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	9b 83       	std	Y+3, r25	; 0x03
     d76:	8a 83       	std	Y+2, r24	; 0x02
	 * 1. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 2.WAITING UNTIL THE CONTROL_ECU SEND A READY COMMAND TOO
	 * 3.SENDING THE PASSWORD ENTERED BY THE USER FROM THE GLOBAL ARRAY
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	while(UART_recieveByte() != READY){};
     d7e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	e1 f7       	brne	.-8      	; 0xd7e <SendPassword+0x16>

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <SendPassword+0x3e>
	{
		UART_sendByte(a_arr[i]);
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	80 81       	ld	r24, Z
     d9c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
	while(UART_recieveByte() != READY){};

	for(uint8 i=0;i<PASSWORD_ARRAY_SIZE;i++)
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	85 30       	cpi	r24, 0x05	; 5
     daa:	78 f3       	brcs	.-34     	; 0xd8a <SendPassword+0x22>
	{
		UART_sendByte(a_arr[i]);
	}
	while(UART_recieveByte() != DONE){};
     dac:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	e1 f7       	brne	.-8      	; 0xdac <SendPassword+0x44>
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <sendCommand>:
 * [Arguments]:       unsigned integer command number
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void sendCommand(uint8 command)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
	 * 1. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 2.WAITING UNTIL THE CONTROL_ECU SEND A READY COMMAND TOO
	 * 3.SENDING A COMMAND FROM THE HMI_ECU
	 * 4. WAITING UNTIL THE CONTROL_ECU SENDS DONE COMMAND
	 */
	UART_sendByte(READY);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	while(UART_recieveByte() != READY){};
     dd2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <sendCommand+0x12>
	UART_sendByte(command);
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	while(UART_recieveByte() != DONE){};
     de0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	e1 f7       	brne	.-8      	; 0xde0 <sendCommand+0x20>

}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <recieveCommand>:
 * [Arguments]:       VOID
 *
 * [Returns]:         unsigned integer command number
 ***************************************************************************************************/
uint8 recieveCommand(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	 * 2. SEND A READY COMMAND TO THE CONTROL_ECU TO SAY THAT HMI_ECI IS READY
	 * 3. RECIEVE A COMMAND FROM THE CONTROL_ECU
	 * 4. SENDING TO THE  CONTROL_ECU  DONE COMMAND
	 * 5. RETURN THE COMMAND SENT FROM THE COTROL_ECU
	 */
	while(UART_recieveByte() != READY){};
     df8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <recieveCommand+0x8>
	UART_sendByte(READY);
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	command=UART_recieveByte();
     e06:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
     e0a:	80 93 86 01 	sts	0x0186, r24
	UART_sendByte(DONE);
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
	return command;
     e14:	80 91 86 01 	lds	r24, 0x0186
}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <mainFucntion>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void mainFucntion(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	a2 97       	sbiw	r28, 0x22	; 34
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	 *            IF IT MATCHES:
	 *                          GO TO STATE NUMBER 2 TO OPEN THE DOOR
	 *            IF NOT:
	 *                   DISPLAY PASSWORD WRONG MESSAGE ALSO INCREMENT THE GLOBAL WRONG VARIABLE
	 */
	LCD_clearScreen();
     e32:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(ROW_ZERO,COLUMN_SEVEN,"(+): CHANGE PASSWORD");
     e36:	26 eb       	ldi	r18, 0xB6	; 182
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	67 e0       	ldi	r22, 0x07	; 7
     e3e:	a9 01       	movw	r20, r18
     e40:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(ROW_ONE,COLUMN_SEVEN,"(-): OPEN DOOR");
     e44:	2b ec       	ldi	r18, 0xCB	; 203
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	a9 01       	movw	r20, r18
     e4e:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	switch(KeyPad_getPressedKey())
     e52:	0e 94 32 16 	call	0x2c64	; 0x2c64 <KeyPad_getPressedKey>
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3a a3       	std	Y+34, r19	; 0x22
     e5c:	29 a3       	std	Y+33, r18	; 0x21
     e5e:	89 a1       	ldd	r24, Y+33	; 0x21
     e60:	9a a1       	ldd	r25, Y+34	; 0x22
     e62:	8b 32       	cpi	r24, 0x2B	; 43
     e64:	91 05       	cpc	r25, r1
     e66:	39 f0       	breq	.+14     	; 0xe76 <mainFucntion+0x58>
     e68:	29 a1       	ldd	r18, Y+33	; 0x21
     e6a:	3a a1       	ldd	r19, Y+34	; 0x22
     e6c:	2d 32       	cpi	r18, 0x2D	; 45
     e6e:	31 05       	cpc	r19, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <mainFucntion+0x56>
     e72:	a6 c0       	rjmp	.+332    	; 0xfc0 <mainFucntion+0x1a2>
     e74:	4b c1       	rjmp	.+662    	; 0x110c <mainFucntion+0x2ee>
	{
	case '+':
		LCD_clearScreen();
     e76:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_ZERO,"PLEASE ENTER OLD PASSWORD:(5)");
     e7a:	2a ed       	ldi	r18, 0xDA	; 218
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_goToRowColumn(ROW_ONE,COLUMN_TWELVE);
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	6c e0       	ldi	r22, 0x0C	; 12
     e8c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_goToRowColumn>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e8       	ldi	r25, 0x80	; 128
     e94:	ab eb       	ldi	r26, 0xBB	; 187
     e96:	b4 e4       	ldi	r27, 0x44	; 68
     e98:	89 8f       	std	Y+25, r24	; 0x19
     e9a:	9a 8f       	std	Y+26, r25	; 0x1a
     e9c:	ab 8f       	std	Y+27, r26	; 0x1b
     e9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	69 8d       	ldd	r22, Y+25	; 0x19
     ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	53 e4       	ldi	r21, 0x43	; 67
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8d 8b       	std	Y+21, r24	; 0x15
     eba:	9e 8b       	std	Y+22, r25	; 0x16
     ebc:	af 8b       	std	Y+23, r26	; 0x17
     ebe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ec0:	6d 89       	ldd	r22, Y+21	; 0x15
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <mainFucntion+0xc4>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <mainFucntion+0x142>
	else if (__tmp > 65535)
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <mainFucntion+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	69 8d       	ldd	r22, Y+25	; 0x19
     efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <mainFucntion+0x124>
     f24:	89 e1       	ldi	r24, 0x19	; 25
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9a 8b       	std	Y+18, r25	; 0x12
     f2a:	89 8b       	std	Y+17, r24	; 0x11
     f2c:	89 89       	ldd	r24, Y+17	; 0x11
     f2e:	9a 89       	ldd	r25, Y+18	; 0x12
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <mainFucntion+0x112>
     f34:	9a 8b       	std	Y+18, r25	; 0x12
     f36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8b 89       	ldd	r24, Y+19	; 0x13
     f3a:	9c 89       	ldd	r25, Y+20	; 0x14
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8b 89       	ldd	r24, Y+19	; 0x13
     f44:	9c 89       	ldd	r25, Y+20	; 0x14
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <mainFucntion+0x106>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <mainFucntion+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	6d 89       	ldd	r22, Y+21	; 0x15
     f4e:	7e 89       	ldd	r23, Y+22	; 0x16
     f50:	8f 89       	ldd	r24, Y+23	; 0x17
     f52:	98 8d       	ldd	r25, Y+24	; 0x18
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9c 8b       	std	Y+20, r25	; 0x14
     f5e:	8b 8b       	std	Y+19, r24	; 0x13
     f60:	8b 89       	ldd	r24, Y+19	; 0x13
     f62:	9c 89       	ldd	r25, Y+20	; 0x14
     f64:	98 8b       	std	Y+16, r25	; 0x10
     f66:	8f 87       	std	Y+15, r24	; 0x0f
     f68:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6a:	98 89       	ldd	r25, Y+16	; 0x10
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <mainFucntion+0x14e>
     f70:	98 8b       	std	Y+16, r25	; 0x10
     f72:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(ONE_AND_HALF_SEC_DELAY);
		fillInPassword(g_password);
     f74:	87 e8       	ldi	r24, 0x87	; 135
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 4f 09 	call	0x129e	; 0x129e <fillInPassword>
		sendCommand(CHECK_PASSWORD);
     f7c:	89 e0       	ldi	r24, 0x09	; 9
     f7e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
		SendPassword(g_password);
     f82:	87 e8       	ldi	r24, 0x87	; 135
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 b4 06 	call	0xd68	; 0xd68 <SendPassword>
		switch (recieveCommand())
     f8a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <recieveCommand>
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	38 a3       	std	Y+32, r19	; 0x20
     f94:	2f 8f       	std	Y+31, r18	; 0x1f
     f96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f98:	98 a1       	ldd	r25, Y+32	; 0x20
     f9a:	84 30       	cpi	r24, 0x04	; 4
     f9c:	91 05       	cpc	r25, r1
     f9e:	31 f0       	breq	.+12     	; 0xfac <mainFucntion+0x18e>
     fa0:	2f 8d       	ldd	r18, Y+31	; 0x1f
     fa2:	38 a1       	ldd	r19, Y+32	; 0x20
     fa4:	25 30       	cpi	r18, 0x05	; 5
     fa6:	31 05       	cpc	r19, r1
     fa8:	41 f0       	breq	.+16     	; 0xfba <mainFucntion+0x19c>
     faa:	b0 c0       	rjmp	.+352    	; 0x110c <mainFucntion+0x2ee>
		{
		case PASSWORD_MATCH:
			g_flag=0;
     fac:	10 92 78 01 	sts	0x0178, r1
			g_stateNum=0;
     fb0:	10 92 7d 01 	sts	0x017D, r1
			g_wrong=0;
     fb4:	10 92 79 01 	sts	0x0179, r1
     fb8:	a9 c0       	rjmp	.+338    	; 0x110c <mainFucntion+0x2ee>
			break;
		case PASSWORD_NOT_MATCHED:
			wrongPasswordScreen();
     fba:	0e 94 b3 08 	call	0x1166	; 0x1166 <wrongPasswordScreen>
     fbe:	a6 c0       	rjmp	.+332    	; 0x110c <mainFucntion+0x2ee>
			break;
		}
		break;
		case '-':
			LCD_clearScreen();
     fc0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
			LCD_displayStringRowColumn(ROW_ZERO,COLUMN_ZERO,"PLEASE ENTER OLD PASSWORD:(5)");
     fc4:	2a ed       	ldi	r18, 0xDA	; 218
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
			LCD_goToRowColumn(ROW_ONE,COLUMN_TWELVE);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	6c e0       	ldi	r22, 0x0C	; 12
     fd6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_goToRowColumn>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e8       	ldi	r25, 0x80	; 128
     fde:	ab eb       	ldi	r26, 0xBB	; 187
     fe0:	b4 e4       	ldi	r27, 0x44	; 68
     fe2:	8b 87       	std	Y+11, r24	; 0x0b
     fe4:	9c 87       	std	Y+12, r25	; 0x0c
     fe6:	ad 87       	std	Y+13, r26	; 0x0d
     fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	98 87       	std	Y+8, r25	; 0x08
    1006:	a9 87       	std	Y+9, r26	; 0x09
    1008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <mainFucntion+0x20e>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <mainFucntion+0x28c>
	else if (__tmp > 65535)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <mainFucntion+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	0f c0       	rjmp	.+30     	; 0x108c <mainFucntion+0x26e>
    106e:	89 e1       	ldi	r24, 0x19	; 25
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <mainFucntion+0x25c>
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <mainFucntion+0x250>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <mainFucntion+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6f 81       	ldd	r22, Y+7	; 0x07
    1098:	78 85       	ldd	r23, Y+8	; 0x08
    109a:	89 85       	ldd	r24, Y+9	; 0x09
    109c:	9a 85       	ldd	r25, Y+10	; 0x0a
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	9e 81       	ldd	r25, Y+6	; 0x06
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <mainFucntion+0x298>
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(ONE_AND_HALF_SEC_DELAY);
			fillInPassword(g_password);
    10be:	87 e8       	ldi	r24, 0x87	; 135
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 4f 09 	call	0x129e	; 0x129e <fillInPassword>
			sendCommand(CHECK_PASSWORD);
    10c6:	89 e0       	ldi	r24, 0x09	; 9
    10c8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
			SendPassword(g_password);
    10cc:	87 e8       	ldi	r24, 0x87	; 135
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 b4 06 	call	0xd68	; 0xd68 <SendPassword>
			switch (recieveCommand()){
    10d4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <recieveCommand>
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3e 8f       	std	Y+30, r19	; 0x1e
    10de:	2d 8f       	std	Y+29, r18	; 0x1d
    10e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	91 05       	cpc	r25, r1
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <mainFucntion+0x2d8>
    10ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10ee:	25 30       	cpi	r18, 0x05	; 5
    10f0:	31 05       	cpc	r19, r1
    10f2:	51 f0       	breq	.+20     	; 0x1108 <mainFucntion+0x2ea>
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <mainFucntion+0x2ee>
			case PASSWORD_MATCH:
				sendCommand(OPEN_DOOR);
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
				g_stateNum=2;
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	80 93 7d 01 	sts	0x017D, r24
				g_wrong=0;
    1102:	10 92 79 01 	sts	0x0179, r1
    1106:	02 c0       	rjmp	.+4      	; 0x110c <mainFucntion+0x2ee>
				break;
			case PASSWORD_NOT_MATCHED:
				wrongPasswordScreen();
    1108:	0e 94 b3 08 	call	0x1166	; 0x1166 <wrongPasswordScreen>
				break;
			}
			break;
	}

}
    110c:	a2 96       	adiw	r28, 0x22	; 34
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <ifPassSavedORNOT>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void ifPassSavedORNOT(void)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <ifPassSavedORNOT+0x6>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	 * IF YES_SAVED COMMAD:
	 *                    GO TO STATE 1 FOR THE MAIN FUNCTION
	 * IF NO_SAVED_PASSWORD:
	 *                     GO TO STATE 0 TO ENTER A NEW PASSWORD
	 */
	sendCommand(CHECK_IF_SAVED);
    1128:	8b e0       	ldi	r24, 0x0B	; 11
    112a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
	switch (recieveCommand())
    112e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <recieveCommand>
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3a 83       	std	Y+2, r19	; 0x02
    1138:	29 83       	std	Y+1, r18	; 0x01
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	8c 30       	cpi	r24, 0x0C	; 12
    1140:	91 05       	cpc	r25, r1
    1142:	31 f0       	breq	.+12     	; 0x1150 <ifPassSavedORNOT+0x32>
    1144:	29 81       	ldd	r18, Y+1	; 0x01
    1146:	3a 81       	ldd	r19, Y+2	; 0x02
    1148:	2d 30       	cpi	r18, 0x0D	; 13
    114a:	31 05       	cpc	r19, r1
    114c:	29 f0       	breq	.+10     	; 0x1158 <ifPassSavedORNOT+0x3a>
    114e:	06 c0       	rjmp	.+12     	; 0x115c <ifPassSavedORNOT+0x3e>
	{
	case YES_SAVED:
		g_stateNum=1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	80 93 7d 01 	sts	0x017D, r24
    1156:	02 c0       	rjmp	.+4      	; 0x115c <ifPassSavedORNOT+0x3e>
		break;
	case NO_SAVED_PASSWORD:
		g_stateNum=0;
    1158:	10 92 7d 01 	sts	0x017D, r1
		break;

	}

}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <wrongPasswordScreen>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void wrongPasswordScreen(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	2e 97       	sbiw	r28, 0x0e	; 14
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
	 *2. INCREMENT THE GLOBAL WRONG VARIABLE
	 *3. SEND COMMANT TO THE CONTROL_ECU THAT THE USER HAS ENTERED A WRONG PASSWORD
	 *4. IF PASSWORD ENTERED IS WRONG 3 TIMES IN A ROW
	 *   IT WILL DISPLAY AN ALARM MESSAGE ON THE SCREEN
	 */
	LCD_clearScreen();
    117a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(ROW_ZERO,COLUMN_NINE,"WRONG PASSWORD!!");
    117e:	28 ef       	ldi	r18, 0xF8	; 248
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	69 e0       	ldi	r22, 0x09	; 9
    1186:	a9 01       	movw	r20, r18
    1188:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	g_wrong++;
    118c:	80 91 79 01 	lds	r24, 0x0179
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	80 93 79 01 	sts	0x0179, r24
	sendCommand(WRONG_PASSWORD);
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sendCommand>
	if(g_wrong == MAX_WRONG_COUNTER)
    119c:	80 91 79 01 	lds	r24, 0x0179
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <wrongPasswordScreen+0x42>
	{
		ALERTscreen();
    11a4:	0e 94 9f 0a 	call	0x153e	; 0x153e <ALERTscreen>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	aa e7       	ldi	r26, 0x7A	; 122
    11ae:	b5 e4       	ldi	r27, 0x45	; 69
    11b0:	8b 87       	std	Y+11, r24	; 0x0b
    11b2:	9c 87       	std	Y+12, r25	; 0x0c
    11b4:	ad 87       	std	Y+13, r26	; 0x0d
    11b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	a9 87       	std	Y+9, r26	; 0x09
    11d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <wrongPasswordScreen+0x94>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <wrongPasswordScreen+0x112>
	else if (__tmp > 65535)
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <wrongPasswordScreen+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	0f c0       	rjmp	.+30     	; 0x125a <wrongPasswordScreen+0xf4>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <wrongPasswordScreen+0xe2>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <wrongPasswordScreen+0xd6>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <wrongPasswordScreen+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <wrongPasswordScreen+0x11e>
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(FOUR_SECONDS_DELAY);

}
    128c:	2e 96       	adiw	r28, 0x0e	; 14
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <fillInPassword>:
 * [Arguments]:       ARRAY of unsigned integers and it's size is 5 (password size)
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void fillInPassword(uint8 a_arr[])
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	61 97       	sbiw	r28, 0x11	; 17
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	99 8b       	std	Y+17, r25	; 0x11
    12b4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter=0;
    12b6:	1f 86       	std	Y+15, r1	; 0x0f
	g_key=KeyPad_getPressedKey();
    12b8:	0e 94 32 16 	call	0x2c64	; 0x2c64 <KeyPad_getPressedKey>
    12bc:	80 93 8c 01 	sts	0x018C, r24
    12c0:	a2 c0       	rjmp	.+324    	; 0x1406 <fillInPassword+0x168>
	while(g_key != '=')
	{
		g_key=KeyPad_getPressedKey();
    12c2:	0e 94 32 16 	call	0x2c64	; 0x2c64 <KeyPad_getPressedKey>
    12c6:	80 93 8c 01 	sts	0x018C, r24
		if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )
    12ca:	80 91 8c 01 	lds	r24, 0x018C
    12ce:	8b 32       	cpi	r24, 0x2B	; 43
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <fillInPassword+0x54>
    12d2:	80 91 8c 01 	lds	r24, 0x018C
    12d6:	8d 32       	cpi	r24, 0x2D	; 45
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <fillInPassword+0x54>
    12da:	80 91 8c 01 	lds	r24, 0x018C
    12de:	8a 32       	cpi	r24, 0x2A	; 42
    12e0:	41 f0       	breq	.+16     	; 0x12f2 <fillInPassword+0x54>
    12e2:	80 91 8c 01 	lds	r24, 0x018C
    12e6:	85 32       	cpi	r24, 0x25	; 37
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <fillInPassword+0x54>
    12ea:	80 91 8c 01 	lds	r24, 0x018C
    12ee:	8d 33       	cpi	r24, 0x3D	; 61
    12f0:	21 f4       	brne	.+8      	; 0x12fa <fillInPassword+0x5c>
    12f2:	80 91 8c 01 	lds	r24, 0x018C
    12f6:	8a 30       	cpi	r24, 0x0A	; 10
    12f8:	a0 f4       	brcc	.+40     	; 0x1322 <fillInPassword+0x84>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
    12fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fc:	85 30       	cpi	r24, 0x05	; 5
    12fe:	88 f4       	brcc	.+34     	; 0x1322 <fillInPassword+0x84>
			{
				a_arr[counter]=g_key;
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	88 89       	ldd	r24, Y+16	; 0x10
    1308:	99 89       	ldd	r25, Y+17	; 0x11
    130a:	fc 01       	movw	r30, r24
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	80 91 8c 01 	lds	r24, 0x018C
    1314:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1316:	8a e2       	ldi	r24, 0x2A	; 42
    1318:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_displayCharacter>
				counter++;
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e8       	ldi	r25, 0x80	; 128
    1326:	ab e3       	ldi	r26, 0x3B	; 59
    1328:	b5 e4       	ldi	r27, 0x45	; 69
    132a:	8b 87       	std	Y+11, r24	; 0x0b
    132c:	9c 87       	std	Y+12, r25	; 0x0c
    132e:	ad 87       	std	Y+13, r26	; 0x0d
    1330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	7c 85       	ldd	r23, Y+12	; 0x0c
    1336:	8d 85       	ldd	r24, Y+13	; 0x0d
    1338:	9e 85       	ldd	r25, Y+14	; 0x0e
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a e7       	ldi	r20, 0x7A	; 122
    1340:	53 e4       	ldi	r21, 0x43	; 67
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8f 83       	std	Y+7, r24	; 0x07
    134c:	98 87       	std	Y+8, r25	; 0x08
    134e:	a9 87       	std	Y+9, r26	; 0x09
    1350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e8       	ldi	r20, 0x80	; 128
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1366:	88 23       	and	r24, r24
    1368:	2c f4       	brge	.+10     	; 0x1374 <fillInPassword+0xd6>
		__ticks = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
    1372:	3f c0       	rjmp	.+126    	; 0x13f2 <fillInPassword+0x154>
	else if (__tmp > 65535)
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	3f ef       	ldi	r19, 0xFF	; 255
    1380:	4f e7       	ldi	r20, 0x7F	; 127
    1382:	57 e4       	ldi	r21, 0x47	; 71
    1384:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1388:	18 16       	cp	r1, r24
    138a:	4c f5       	brge	.+82     	; 0x13de <fillInPassword+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	6b 85       	ldd	r22, Y+11	; 0x0b
    138e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1390:	8d 85       	ldd	r24, Y+13	; 0x0d
    1392:	9e 85       	ldd	r25, Y+14	; 0x0e
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e2       	ldi	r20, 0x20	; 32
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <fillInPassword+0x136>
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <fillInPassword+0x124>
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	69 f7       	brne	.-38     	; 0x13b6 <fillInPassword+0x118>
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <fillInPassword+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13de:	6f 81       	ldd	r22, Y+7	; 0x07
    13e0:	78 85       	ldd	r23, Y+8	; 0x08
    13e2:	89 85       	ldd	r24, Y+9	; 0x09
    13e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <fillInPassword+0x160>
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
 ***************************************************************************************************/
void fillInPassword(uint8 a_arr[])
{
	uint8 counter=0;
	g_key=KeyPad_getPressedKey();
	while(g_key != '=')
    1406:	80 91 8c 01 	lds	r24, 0x018C
    140a:	8d 33       	cpi	r24, 0x3D	; 61
    140c:	09 f0       	breq	.+2      	; 0x1410 <fillInPassword+0x172>
    140e:	59 cf       	rjmp	.-334    	; 0x12c2 <fillInPassword+0x24>
			}
		}
		_delay_ms(THREE_SECONDS_DELAY);
	}

}
    1410:	61 96       	adiw	r28, 0x11	; 17
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <PasswordDONTMATCHScreen>:
 *
 * [Returns]:         VOID
 ***************************************************************************************************/

void PasswordDONTMATCHScreen(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	2e 97       	sbiw	r28, 0x0e	; 14
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1436:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	LCD_displayStringRowColumn(ROW_ZERO,COLUMN_ZERO,"PASSWORD DON'T MATCH..");
    143a:	29 e0       	ldi	r18, 0x09	; 9
    143c:	31 e0       	ldi	r19, 0x01	; 1
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	aa e7       	ldi	r26, 0x7A	; 122
    144e:	b5 e4       	ldi	r27, 0x45	; 69
    1450:	8b 87       	std	Y+11, r24	; 0x0b
    1452:	9c 87       	std	Y+12, r25	; 0x0c
    1454:	ad 87       	std	Y+13, r26	; 0x0d
    1456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	53 e4       	ldi	r21, 0x43	; 67
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8f 83       	std	Y+7, r24	; 0x07
    1472:	98 87       	std	Y+8, r25	; 0x08
    1474:	a9 87       	std	Y+9, r26	; 0x09
    1476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <PasswordDONTMATCHScreen+0x78>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <PasswordDONTMATCHScreen+0xf6>
	else if (__tmp > 65535)
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <PasswordDONTMATCHScreen+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <PasswordDONTMATCHScreen+0xd8>
    14dc:	89 e1       	ldi	r24, 0x19	; 25
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <PasswordDONTMATCHScreen+0xc6>
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <PasswordDONTMATCHScreen+0xba>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <PasswordDONTMATCHScreen+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <PasswordDONTMATCHScreen+0x102>
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(FOUR_SECONDS_DELAY);

}
    152c:	2e 96       	adiw	r28, 0x0e	; 14
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <ALERTscreen>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void ALERTscreen(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	 * 2.SET THE CALL BACK FUNCTION
	 * 3. WHILE TIMER HASN'T FINISHED COUNTING DISPLAY ALERT MESSAGE
	 * 4. IF TIME REACHED THE REQUIRED COUNTS
	 *    WRONG COUNTER BACK TO ZERO COUNTS ALSO GO BACK TO THE MAIN FUNCTION
	 */
	LCD_clearScreen();
    1546:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	Timer_init(&TIMER_configuration);
    154a:	86 e6       	ldi	r24, 0x66	; 102
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 a7 11 	call	0x234e	; 0x234e <Timer_init>
	Timer_setCallBack(g_tickCounterAlarm,Timer1);
    1552:	8c e9       	ldi	r24, 0x9C	; 156
    1554:	9b e0       	ldi	r25, 0x0B	; 11
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0e 94 33 14 	call	0x2866	; 0x2866 <Timer_setCallBack>
    155c:	0e c0       	rjmp	.+28     	; 0x157a <ALERTscreen+0x3c>

	while(g_tick != TIMER_TICKS_1MINUTE)
	{
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_TWELVE,"ALERT!!!!");
    155e:	20 e2       	ldi	r18, 0x20	; 32
    1560:	31 e0       	ldi	r19, 0x01	; 1
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	6c e0       	ldi	r22, 0x0C	; 12
    1566:	a9 01       	movw	r20, r18
    1568:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(ROW_ONE,COLUMN_TWELVE,"THEIF!!!!");
    156c:	2a e2       	ldi	r18, 0x2A	; 42
    156e:	31 e0       	ldi	r19, 0x01	; 1
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	6c e0       	ldi	r22, 0x0C	; 12
    1574:	a9 01       	movw	r20, r18
    1576:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	 */
	LCD_clearScreen();
	Timer_init(&TIMER_configuration);
	Timer_setCallBack(g_tickCounterAlarm,Timer1);

	while(g_tick != TIMER_TICKS_1MINUTE)
    157a:	80 91 7a 01 	lds	r24, 0x017A
    157e:	8c 30       	cpi	r24, 0x0C	; 12
    1580:	71 f7       	brne	.-36     	; 0x155e <ALERTscreen+0x20>
	{
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_TWELVE,"ALERT!!!!");
		LCD_displayStringRowColumn(ROW_ONE,COLUMN_TWELVE,"THEIF!!!!");
	}
	if(g_tick==TIMER_TICKS_1MINUTE_STOP)
    1582:	80 91 7a 01 	lds	r24, 0x017A
    1586:	8d 30       	cpi	r24, 0x0D	; 13
    1588:	29 f4       	brne	.+10     	; 0x1594 <ALERTscreen+0x56>
	{
		g_wrong=0;
    158a:	10 92 79 01 	sts	0x0179, r1
		g_stateNum=1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	80 93 7d 01 	sts	0x017D, r24
	}

}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <doorIsOpeningCloseingScreen>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void doorIsOpeningCloseingScreen(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	2e 97       	sbiw	r28, 0x0e	; 14
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
	 * 2.SET THE CALL BACK FUNCTION
	 * 3. WHILE TIMER HASN'T FINISHED COUNTING DISPLAY DOOR IS UNLOCKING AND LOCKING  MESSAGE
	 * 4. IF TIME REACHED THE REQUIRED COUNTS
	 *    WRONG COUNTER BACK TO ZERO COUNTS ALSO GO BACK TO THE MAIN FUNCTION
	 */
	LCD_clearScreen();
    15ae:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
	Timer_init(&TIMER_configuration);
    15b2:	86 e6       	ldi	r24, 0x66	; 102
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	0e 94 a7 11 	call	0x234e	; 0x234e <Timer_init>
	Timer_setCallBack(g_tickCounterMotor,Timer1);
    15ba:	87 e8       	ldi	r24, 0x87	; 135
    15bc:	9b e0       	ldi	r25, 0x0B	; 11
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	0e 94 33 14 	call	0x2866	; 0x2866 <Timer_setCallBack>
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <doorIsOpeningCloseingScreen+0x3a>
	while(g_tick != TIMER_TICKS_15SEC)
	{
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_SEVEN,"DOOR IS UNLOCKING..");
    15c6:	24 e3       	ldi	r18, 0x34	; 52
    15c8:	31 e0       	ldi	r19, 0x01	; 1
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	67 e0       	ldi	r22, 0x07	; 7
    15ce:	a9 01       	movw	r20, r18
    15d0:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	 *    WRONG COUNTER BACK TO ZERO COUNTS ALSO GO BACK TO THE MAIN FUNCTION
	 */
	LCD_clearScreen();
	Timer_init(&TIMER_configuration);
	Timer_setCallBack(g_tickCounterMotor,Timer1);
	while(g_tick != TIMER_TICKS_15SEC)
    15d4:	80 91 7a 01 	lds	r24, 0x017A
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	a9 f7       	brne	.-22     	; 0x15c6 <doorIsOpeningCloseingScreen+0x2c>
	{
		LCD_displayStringRowColumn(ROW_ZERO,COLUMN_SEVEN,"DOOR IS UNLOCKING..");
	}
	if(g_tick == TIMER_TICKS_15SEC)
    15dc:	80 91 7a 01 	lds	r24, 0x017A
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <doorIsOpeningCloseingScreen+0x4c>
    15e4:	83 c0       	rjmp	.+262    	; 0x16ec <doorIsOpeningCloseingScreen+0x152>
	{
		LCD_clearScreen();
    15e6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_clearScreen>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	aa e7       	ldi	r26, 0x7A	; 122
    15f0:	b5 e4       	ldi	r27, 0x45	; 69
    15f2:	8b 87       	std	Y+11, r24	; 0x0b
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	ad 87       	std	Y+13, r26	; 0x0d
    15f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1600:	9e 85       	ldd	r25, Y+14	; 0x0e
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a e7       	ldi	r20, 0x7A	; 122
    1608:	53 e4       	ldi	r21, 0x43	; 67
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8f 83       	std	Y+7, r24	; 0x07
    1614:	98 87       	std	Y+8, r25	; 0x08
    1616:	a9 87       	std	Y+9, r26	; 0x09
    1618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <doorIsOpeningCloseingScreen+0xa2>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <doorIsOpeningCloseingScreen+0x120>
	else if (__tmp > 65535)
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <doorIsOpeningCloseingScreen+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	0f c0       	rjmp	.+30     	; 0x169c <doorIsOpeningCloseingScreen+0x102>
    167e:	89 e1       	ldi	r24, 0x19	; 25
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <doorIsOpeningCloseingScreen+0xf0>
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <doorIsOpeningCloseingScreen+0xe4>
    16a4:	23 c0       	rjmp	.+70     	; 0x16ec <doorIsOpeningCloseingScreen+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <doorIsOpeningCloseingScreen+0x12c>
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	0e c0       	rjmp	.+28     	; 0x16ec <doorIsOpeningCloseingScreen+0x152>
		_delay_ms(FOUR_SECONDS_DELAY);
	}
	while(g_tick>= TIMER_TICKS_15SEC && g_tick < TIMER_TICKS_15SEC_STOP)
	{
		if(g_tick == TIMER_TICKS_15SEC_NEXT_STAGE)
    16d0:	80 91 7a 01 	lds	r24, 0x017A
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	19 f4       	brne	.+6      	; 0x16de <doorIsOpeningCloseingScreen+0x144>
		{
			g_stateNum=1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 7d 01 	sts	0x017D, r24
		}
		LCD_displayStringRowColumn(0,7,"DOOR IS LOCKING..");
    16de:	28 e4       	ldi	r18, 0x48	; 72
    16e0:	31 e0       	ldi	r19, 0x01	; 1
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	67 e0       	ldi	r22, 0x07	; 7
    16e6:	a9 01       	movw	r20, r18
    16e8:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayStringRowColumn>
	if(g_tick == TIMER_TICKS_15SEC)
	{
		LCD_clearScreen();
		_delay_ms(FOUR_SECONDS_DELAY);
	}
	while(g_tick>= TIMER_TICKS_15SEC && g_tick < TIMER_TICKS_15SEC_STOP)
    16ec:	80 91 7a 01 	lds	r24, 0x017A
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <doorIsOpeningCloseingScreen+0x162>
    16f4:	80 91 7a 01 	lds	r24, 0x017A
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	50 f3       	brcs	.-44     	; 0x16d0 <doorIsOpeningCloseingScreen+0x136>
			g_stateNum=1;
		}
		LCD_displayStringRowColumn(0,7,"DOOR IS LOCKING..");
	}

}
    16fc:	2e 96       	adiw	r28, 0x0e	; 14
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <g_tickCounterMotor>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void g_tickCounterMotor(void)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1716:	80 91 7a 01 	lds	r24, 0x017A
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 7a 01 	sts	0x017A, r24

	if(g_tick==TIMER_TICKS_15SEC_STOP)
    1720:	80 91 7a 01 	lds	r24, 0x017A
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	29 f4       	brne	.+10     	; 0x1732 <g_tickCounterMotor+0x24>
	{
		Timer_DeInit(Timer1);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	0e 94 a3 14 	call	0x2946	; 0x2946 <Timer_DeInit>
		g_tick=0;
    172e:	10 92 7a 01 	sts	0x017A, r1
	}
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <g_tickCounterAlarm>:
 * [Arguments]:       VOID
 *
 * [Returns]:         VOID
 ***************************************************************************************************/
void g_tickCounterAlarm(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1740:	80 91 7a 01 	lds	r24, 0x017A
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	80 93 7a 01 	sts	0x017A, r24
	if(g_tick == TIMER_TICKS_1MINUTE_STOP)
    174a:	80 91 7a 01 	lds	r24, 0x017A
    174e:	8d 30       	cpi	r24, 0x0D	; 13
    1750:	29 f4       	brne	.+10     	; 0x175c <g_tickCounterAlarm+0x24>
	{
		Timer_DeInit(Timer1);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 a3 14 	call	0x2946	; 0x2946 <Timer_DeInit>
		g_tick=0;
    1758:	10 92 7a 01 	sts	0x017A, r1

	}
}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    176a:	a1 e3       	ldi	r26, 0x31	; 49
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e1 e3       	ldi	r30, 0x31	; 49
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	80 67       	ori	r24, 0x70	; 112
    1776:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1780:	88 e3       	ldi	r24, 0x38	; 56
    1782:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_sendCommand>
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1786:	8c e0       	ldi	r24, 0x0C	; 12
    1788:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_sendCommand>
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	e9 97       	sbiw	r28, 0x39	; 57
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7e       	andi	r24, 0xEF	; 239
    17ba:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	8c 93       	st	X, r24
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e8       	ldi	r26, 0x80	; 128
    17d0:	bf e3       	ldi	r27, 0x3F	; 63
    17d2:	8d ab       	std	Y+53, r24	; 0x35
    17d4:	9e ab       	std	Y+54, r25	; 0x36
    17d6:	af ab       	std	Y+55, r26	; 0x37
    17d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	6d a9       	ldd	r22, Y+53	; 0x35
    17dc:	7e a9       	ldd	r23, Y+54	; 0x36
    17de:	8f a9       	ldd	r24, Y+55	; 0x37
    17e0:	98 ad       	ldd	r25, Y+56	; 0x38
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	53 e4       	ldi	r21, 0x43	; 67
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	89 ab       	std	Y+49, r24	; 0x31
    17f4:	9a ab       	std	Y+50, r25	; 0x32
    17f6:	ab ab       	std	Y+51, r26	; 0x33
    17f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17fa:	69 a9       	ldd	r22, Y+49	; 0x31
    17fc:	7a a9       	ldd	r23, Y+50	; 0x32
    17fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1800:	9c a9       	ldd	r25, Y+52	; 0x34
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <LCD_sendCommand+0x84>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	98 ab       	std	Y+48, r25	; 0x30
    1818:	8f a7       	std	Y+47, r24	; 0x2f
    181a:	3f c0       	rjmp	.+126    	; 0x189a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    181c:	69 a9       	ldd	r22, Y+49	; 0x31
    181e:	7a a9       	ldd	r23, Y+50	; 0x32
    1820:	8b a9       	ldd	r24, Y+51	; 0x33
    1822:	9c a9       	ldd	r25, Y+52	; 0x34
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	6d a9       	ldd	r22, Y+53	; 0x35
    1836:	7e a9       	ldd	r23, Y+54	; 0x36
    1838:	8f a9       	ldd	r24, Y+55	; 0x37
    183a:	98 ad       	ldd	r25, Y+56	; 0x38
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	98 ab       	std	Y+48, r25	; 0x30
    185a:	8f a7       	std	Y+47, r24	; 0x2f
    185c:	0f c0       	rjmp	.+30     	; 0x187c <LCD_sendCommand+0xe4>
    185e:	89 e1       	ldi	r24, 0x19	; 25
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9e a7       	std	Y+46, r25	; 0x2e
    1864:	8d a7       	std	Y+45, r24	; 0x2d
    1866:	8d a5       	ldd	r24, Y+45	; 0x2d
    1868:	9e a5       	ldd	r25, Y+46	; 0x2e
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_sendCommand+0xd2>
    186e:	9e a7       	std	Y+46, r25	; 0x2e
    1870:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8f a5       	ldd	r24, Y+47	; 0x2f
    1874:	98 a9       	ldd	r25, Y+48	; 0x30
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	98 ab       	std	Y+48, r25	; 0x30
    187a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <LCD_sendCommand+0xc6>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	69 a9       	ldd	r22, Y+49	; 0x31
    1888:	7a a9       	ldd	r23, Y+50	; 0x32
    188a:	8b a9       	ldd	r24, Y+51	; 0x33
    188c:	9c a9       	ldd	r25, Y+52	; 0x34
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	98 ab       	std	Y+48, r25	; 0x30
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	8f a5       	ldd	r24, Y+47	; 0x2f
    189c:	98 a9       	ldd	r25, Y+48	; 0x30
    189e:	9c a7       	std	Y+44, r25	; 0x2c
    18a0:	8b a7       	std	Y+43, r24	; 0x2b
    18a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_sendCommand+0x10e>
    18aa:	9c a7       	std	Y+44, r25	; 0x2c
    18ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18ae:	a2 e3       	ldi	r26, 0x32	; 50
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e2 e3       	ldi	r30, 0x32	; 50
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	80 64       	ori	r24, 0x40	; 64
    18ba:	8c 93       	st	X, r24
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e8       	ldi	r26, 0x80	; 128
    18c2:	bf e3       	ldi	r27, 0x3F	; 63
    18c4:	8f a3       	std	Y+39, r24	; 0x27
    18c6:	98 a7       	std	Y+40, r25	; 0x28
    18c8:	a9 a7       	std	Y+41, r26	; 0x29
    18ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	6f a1       	ldd	r22, Y+39	; 0x27
    18ce:	78 a5       	ldd	r23, Y+40	; 0x28
    18d0:	89 a5       	ldd	r24, Y+41	; 0x29
    18d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a e7       	ldi	r20, 0x7A	; 122
    18da:	53 e4       	ldi	r21, 0x43	; 67
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8b a3       	std	Y+35, r24	; 0x23
    18e6:	9c a3       	std	Y+36, r25	; 0x24
    18e8:	ad a3       	std	Y+37, r26	; 0x25
    18ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ec:	6b a1       	ldd	r22, Y+35	; 0x23
    18ee:	7c a1       	ldd	r23, Y+36	; 0x24
    18f0:	8d a1       	ldd	r24, Y+37	; 0x25
    18f2:	9e a1       	ldd	r25, Y+38	; 0x26
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <LCD_sendCommand+0x176>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a a3       	std	Y+34, r25	; 0x22
    190a:	89 a3       	std	Y+33, r24	; 0x21
    190c:	3f c0       	rjmp	.+126    	; 0x198c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    190e:	6b a1       	ldd	r22, Y+35	; 0x23
    1910:	7c a1       	ldd	r23, Y+36	; 0x24
    1912:	8d a1       	ldd	r24, Y+37	; 0x25
    1914:	9e a1       	ldd	r25, Y+38	; 0x26
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	4c f5       	brge	.+82     	; 0x1978 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	6f a1       	ldd	r22, Y+39	; 0x27
    1928:	78 a5       	ldd	r23, Y+40	; 0x28
    192a:	89 a5       	ldd	r24, Y+41	; 0x29
    192c:	9a a5       	ldd	r25, Y+42	; 0x2a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	0f c0       	rjmp	.+30     	; 0x196e <LCD_sendCommand+0x1d6>
    1950:	89 e1       	ldi	r24, 0x19	; 25
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	98 a3       	std	Y+32, r25	; 0x20
    1956:	8f 8f       	std	Y+31, r24	; 0x1f
    1958:	8f 8d       	ldd	r24, Y+31	; 0x1f
    195a:	98 a1       	ldd	r25, Y+32	; 0x20
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x1c4>
    1960:	98 a3       	std	Y+32, r25	; 0x20
    1962:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9a a3       	std	Y+34, r25	; 0x22
    196c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <LCD_sendCommand+0x1b8>
    1976:	14 c0       	rjmp	.+40     	; 0x19a0 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	6b a1       	ldd	r22, Y+35	; 0x23
    197a:	7c a1       	ldd	r23, Y+36	; 0x24
    197c:	8d a1       	ldd	r24, Y+37	; 0x25
    197e:	9e a1       	ldd	r25, Y+38	; 0x26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9a a3       	std	Y+34, r25	; 0x22
    198a:	89 a3       	std	Y+33, r24	; 0x21
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	8d 8f       	std	Y+29, r24	; 0x1d
    1994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_sendCommand+0x200>
    199c:	9e 8f       	std	Y+30, r25	; 0x1e
    199e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	89 ad       	ldd	r24, Y+57	; 0x39
    19a6:	80 83       	st	Z, r24
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a0 e8       	ldi	r26, 0x80	; 128
    19ae:	bf e3       	ldi	r27, 0x3F	; 63
    19b0:	89 8f       	std	Y+25, r24	; 0x19
    19b2:	9a 8f       	std	Y+26, r25	; 0x1a
    19b4:	ab 8f       	std	Y+27, r26	; 0x1b
    19b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a e7       	ldi	r20, 0x7A	; 122
    19c6:	53 e4       	ldi	r21, 0x43	; 67
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8d 8b       	std	Y+21, r24	; 0x15
    19d2:	9e 8b       	std	Y+22, r25	; 0x16
    19d4:	af 8b       	std	Y+23, r26	; 0x17
    19d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d8:	6d 89       	ldd	r22, Y+21	; 0x15
    19da:	7e 89       	ldd	r23, Y+22	; 0x16
    19dc:	8f 89       	ldd	r24, Y+23	; 0x17
    19de:	98 8d       	ldd	r25, Y+24	; 0x18
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	2c f4       	brge	.+10     	; 0x19fa <LCD_sendCommand+0x262>
		__ticks = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9c 8b       	std	Y+20, r25	; 0x14
    19f6:	8b 8b       	std	Y+19, r24	; 0x13
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	57 e4       	ldi	r21, 0x47	; 71
    1a0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	4c f5       	brge	.+82     	; 0x1a64 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	69 8d       	ldd	r22, Y+25	; 0x19
    1a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e2       	ldi	r20, 0x20	; 32
    1a20:	51 e4       	ldi	r21, 0x41	; 65
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9c 8b       	std	Y+20, r25	; 0x14
    1a38:	8b 8b       	std	Y+19, r24	; 0x13
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <LCD_sendCommand+0x2c2>
    1a3c:	89 e1       	ldi	r24, 0x19	; 25
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9a 8b       	std	Y+18, r25	; 0x12
    1a42:	89 8b       	std	Y+17, r24	; 0x11
    1a44:	89 89       	ldd	r24, Y+17	; 0x11
    1a46:	9a 89       	ldd	r25, Y+18	; 0x12
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_sendCommand+0x2b0>
    1a4c:	9a 8b       	std	Y+18, r25	; 0x12
    1a4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	9c 8b       	std	Y+20, r25	; 0x14
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <LCD_sendCommand+0x2a4>
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a64:	6d 89       	ldd	r22, Y+21	; 0x15
    1a66:	7e 89       	ldd	r23, Y+22	; 0x16
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
    1a78:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7c:	98 8b       	std	Y+16, r25	; 0x10
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	98 89       	ldd	r25, Y+16	; 0x10
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_sendCommand+0x2ec>
    1a88:	98 8b       	std	Y+16, r25	; 0x10
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7b       	andi	r24, 0xBF	; 191
    1a98:	8c 93       	st	X, r24
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	8b 87       	std	Y+11, r24	; 0x0b
    1aa4:	9c 87       	std	Y+12, r25	; 0x0c
    1aa6:	ad 87       	std	Y+13, r26	; 0x0d
    1aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a e7       	ldi	r20, 0x7A	; 122
    1ab8:	53 e4       	ldi	r21, 0x43	; 67
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8f 83       	std	Y+7, r24	; 0x07
    1ac4:	98 87       	std	Y+8, r25	; 0x08
    1ac6:	a9 87       	std	Y+9, r26	; 0x09
    1ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_sendCommand+0x354>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_sendCommand+0x3b4>
    1b2e:	89 e1       	ldi	r24, 0x19	; 25
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_sendCommand+0x3a2>
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_sendCommand+0x396>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_sendCommand+0x3de>
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b7e:	e9 96       	adiw	r28, 0x39	; 57
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	e9 97       	sbiw	r28, 0x39	; 57
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1ba6:	a2 e3       	ldi	r26, 0x32	; 50
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 61       	ori	r24, 0x10	; 16
    1bb2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1bb4:	a2 e3       	ldi	r26, 0x32	; 50
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e2 e3       	ldi	r30, 0x32	; 50
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	8f 7d       	andi	r24, 0xDF	; 223
    1bc0:	8c 93       	st	X, r24
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a0 e8       	ldi	r26, 0x80	; 128
    1bc8:	bf e3       	ldi	r27, 0x3F	; 63
    1bca:	8d ab       	std	Y+53, r24	; 0x35
    1bcc:	9e ab       	std	Y+54, r25	; 0x36
    1bce:	af ab       	std	Y+55, r26	; 0x37
    1bd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a e7       	ldi	r20, 0x7A	; 122
    1be0:	53 e4       	ldi	r21, 0x43	; 67
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	89 ab       	std	Y+49, r24	; 0x31
    1bec:	9a ab       	std	Y+50, r25	; 0x32
    1bee:	ab ab       	std	Y+51, r26	; 0x33
    1bf0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bf2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	98 ab       	std	Y+48, r25	; 0x30
    1c10:	8f a7       	std	Y+47, r24	; 0x2f
    1c12:	3f c0       	rjmp	.+126    	; 0x1c92 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1c14:	69 a9       	ldd	r22, Y+49	; 0x31
    1c16:	7a a9       	ldd	r23, Y+50	; 0x32
    1c18:	8b a9       	ldd	r24, Y+51	; 0x33
    1c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	4c f5       	brge	.+82     	; 0x1c7e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c30:	8f a9       	ldd	r24, Y+55	; 0x37
    1c32:	98 ad       	ldd	r25, Y+56	; 0x38
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	98 ab       	std	Y+48, r25	; 0x30
    1c52:	8f a7       	std	Y+47, r24	; 0x2f
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <LCD_displayCharacter+0xe4>
    1c56:	89 e1       	ldi	r24, 0x19	; 25
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9e a7       	std	Y+46, r25	; 0x2e
    1c5c:	8d a7       	std	Y+45, r24	; 0x2d
    1c5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_displayCharacter+0xd2>
    1c66:	9e a7       	std	Y+46, r25	; 0x2e
    1c68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	98 ab       	std	Y+48, r25	; 0x30
    1c72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c76:	98 a9       	ldd	r25, Y+48	; 0x30
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	69 f7       	brne	.-38     	; 0x1c56 <LCD_displayCharacter+0xc6>
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c80:	7a a9       	ldd	r23, Y+50	; 0x32
    1c82:	8b a9       	ldd	r24, Y+51	; 0x33
    1c84:	9c a9       	ldd	r25, Y+52	; 0x34
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
    1c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c94:	98 a9       	ldd	r25, Y+48	; 0x30
    1c96:	9c a7       	std	Y+44, r25	; 0x2c
    1c98:	8b a7       	std	Y+43, r24	; 0x2b
    1c9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_displayCharacter+0x10e>
    1ca2:	9c a7       	std	Y+44, r25	; 0x2c
    1ca4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ca6:	a2 e3       	ldi	r26, 0x32	; 50
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e2 e3       	ldi	r30, 0x32	; 50
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 64       	ori	r24, 0x40	; 64
    1cb2:	8c 93       	st	X, r24
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	8f a3       	std	Y+39, r24	; 0x27
    1cbe:	98 a7       	std	Y+40, r25	; 0x28
    1cc0:	a9 a7       	std	Y+41, r26	; 0x29
    1cc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a e7       	ldi	r20, 0x7A	; 122
    1cd2:	53 e4       	ldi	r21, 0x43	; 67
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8b a3       	std	Y+35, r24	; 0x23
    1cde:	9c a3       	std	Y+36, r25	; 0x24
    1ce0:	ad a3       	std	Y+37, r26	; 0x25
    1ce2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cea:	9e a1       	ldd	r25, Y+38	; 0x26
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1d06:	6b a1       	ldd	r22, Y+35	; 0x23
    1d08:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d20:	78 a5       	ldd	r23, Y+40	; 0x28
    1d22:	89 a5       	ldd	r24, Y+41	; 0x29
    1d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_displayCharacter+0x1d6>
    1d48:	89 e1       	ldi	r24, 0x19	; 25
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	98 a3       	std	Y+32, r25	; 0x20
    1d4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d52:	98 a1       	ldd	r25, Y+32	; 0x20
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_displayCharacter+0x1c4>
    1d58:	98 a3       	std	Y+32, r25	; 0x20
    1d5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9a a3       	std	Y+34, r25	; 0x22
    1d64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	89 a1       	ldd	r24, Y+33	; 0x21
    1d68:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <LCD_displayCharacter+0x1b8>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6b a1       	ldd	r22, Y+35	; 0x23
    1d72:	7c a1       	ldd	r23, Y+36	; 0x24
    1d74:	8d a1       	ldd	r24, Y+37	; 0x25
    1d76:	9e a1       	ldd	r25, Y+38	; 0x26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
    1d84:	89 a1       	ldd	r24, Y+33	; 0x21
    1d86:	9a a1       	ldd	r25, Y+34	; 0x22
    1d88:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_displayCharacter+0x200>
    1d94:	9e 8f       	std	Y+30, r25	; 0x1e
    1d96:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1d98:	e8 e3       	ldi	r30, 0x38	; 56
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d9e:	80 83       	st	Z, r24
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	89 8f       	std	Y+25, r24	; 0x19
    1daa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dac:	ab 8f       	std	Y+27, r26	; 0x1b
    1dae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	53 e4       	ldi	r21, 0x43	; 67
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8d 8b       	std	Y+21, r24	; 0x15
    1dca:	9e 8b       	std	Y+22, r25	; 0x16
    1dcc:	af 8b       	std	Y+23, r26	; 0x17
    1dce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_displayCharacter+0x2c2>
    1e34:	89 e1       	ldi	r24, 0x19	; 25
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9a 8b       	std	Y+18, r25	; 0x12
    1e3a:	89 8b       	std	Y+17, r24	; 0x11
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayCharacter+0x2b0>
    1e44:	9a 8b       	std	Y+18, r25	; 0x12
    1e46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_displayCharacter+0x2a4>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	98 8b       	std	Y+16, r25	; 0x10
    1e76:	8f 87       	std	Y+15, r24	; 0x0f
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	98 89       	ldd	r25, Y+16	; 0x10
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_displayCharacter+0x2ec>
    1e80:	98 8b       	std	Y+16, r25	; 0x10
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e84:	a2 e3       	ldi	r26, 0x32	; 50
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e2 e3       	ldi	r30, 0x32	; 50
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 7b       	andi	r24, 0xBF	; 191
    1e90:	8c 93       	st	X, r24
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e8       	ldi	r26, 0x80	; 128
    1e98:	bf e3       	ldi	r27, 0x3F	; 63
    1e9a:	8b 87       	std	Y+11, r24	; 0x0b
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c
    1e9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	53 e4       	ldi	r21, 0x43	; 67
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8f 83       	std	Y+7, r24	; 0x07
    1ebc:	98 87       	std	Y+8, r25	; 0x08
    1ebe:	a9 87       	std	Y+9, r26	; 0x09
    1ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_displayCharacter+0x3b4>
    1f26:	89 e1       	ldi	r24, 0x19	; 25
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_displayCharacter+0x3a2>
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_displayCharacter+0x396>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_displayCharacter+0x3de>
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f76:	e9 96       	adiw	r28, 0x39	; 57
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <LCD_displayString+0x6>
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f98:	19 82       	std	Y+1, r1	; 0x01
    1f9a:	0e c0       	rjmp	.+28     	; 0x1fb8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	80 81       	ld	r24, Z
    1fae:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <LCD_displayCharacter>
		i++;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 23       	and	r24, r24
    1fcc:	39 f7       	brne	.-50     	; 0x1f9c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <LCD_goToRowColumn+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <LCD_goToRowColumn+0x8>
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
    1fea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	3d 83       	std	Y+5, r19	; 0x05
    1ff4:	2c 83       	std	Y+4, r18	; 0x04
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	c1 f0       	breq	.+48     	; 0x2030 <LCD_goToRowColumn+0x56>
    2000:	2c 81       	ldd	r18, Y+4	; 0x04
    2002:	3d 81       	ldd	r19, Y+5	; 0x05
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_goToRowColumn+0x3a>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	61 f0       	breq	.+24     	; 0x202a <LCD_goToRowColumn+0x50>
    2012:	19 c0       	rjmp	.+50     	; 0x2046 <LCD_goToRowColumn+0x6c>
    2014:	2c 81       	ldd	r18, Y+4	; 0x04
    2016:	3d 81       	ldd	r19, Y+5	; 0x05
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	69 f0       	breq	.+26     	; 0x2038 <LCD_goToRowColumn+0x5e>
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	9d 81       	ldd	r25, Y+5	; 0x05
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	61 f0       	breq	.+24     	; 0x2040 <LCD_goToRowColumn+0x66>
    2028:	0e c0       	rjmp	.+28     	; 0x2046 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	0b c0       	rjmp	.+22     	; 0x2046 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	80 5c       	subi	r24, 0xC0	; 192
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	80 5f       	subi	r24, 0xF0	; 240
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	80 5b       	subi	r24, 0xB0	; 176
    2044:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_sendCommand>
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <LCD_displayStringRowColumn+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LCD_displayStringRowColumn+0x8>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	6a 83       	std	Y+2, r22	; 0x02
    206e:	5c 83       	std	Y+4, r21	; 0x04
    2070:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	6a 81       	ldd	r22, Y+2	; 0x02
    2076:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_displayString>
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	62 97       	sbiw	r28, 0x12	; 18
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	9a 8b       	std	Y+18, r25	; 0x12
    20a6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	9a 89       	ldd	r25, Y+18	; 0x12
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	b9 01       	movw	r22, r18
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 67 17 	call	0x2ece	; 0x2ece <itoa>
   LCD_displayString(buff);
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <LCD_displayString>
}
    20c4:	62 96       	adiw	r28, 0x12	; 18
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_sendCommand>
}
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <__vector_9>:

/**************************************************************************
 *                              Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    20ea:	1f 92       	push	r1
    20ec:	0f 92       	push	r0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	0f 92       	push	r0
    20f2:	11 24       	eor	r1, r1
    20f4:	2f 93       	push	r18
    20f6:	3f 93       	push	r19
    20f8:	4f 93       	push	r20
    20fa:	5f 93       	push	r21
    20fc:	6f 93       	push	r22
    20fe:	7f 93       	push	r23
    2100:	8f 93       	push	r24
    2102:	9f 93       	push	r25
    2104:	af 93       	push	r26
    2106:	bf 93       	push	r27
    2108:	ef 93       	push	r30
    210a:	ff 93       	push	r31
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2114:	80 91 7e 01 	lds	r24, 0x017E
    2118:	90 91 7f 01 	lds	r25, 0x017F
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	29 f0       	breq	.+10     	; 0x212a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)();
    2120:	e0 91 7e 01 	lds	r30, 0x017E
    2124:	f0 91 7f 01 	lds	r31, 0x017F
    2128:	09 95       	icall
	}
}
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	ff 91       	pop	r31
    2130:	ef 91       	pop	r30
    2132:	bf 91       	pop	r27
    2134:	af 91       	pop	r26
    2136:	9f 91       	pop	r25
    2138:	8f 91       	pop	r24
    213a:	7f 91       	pop	r23
    213c:	6f 91       	pop	r22
    213e:	5f 91       	pop	r21
    2140:	4f 91       	pop	r20
    2142:	3f 91       	pop	r19
    2144:	2f 91       	pop	r18
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti

00002150 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    217a:	80 91 7e 01 	lds	r24, 0x017E
    217e:	90 91 7f 01 	lds	r25, 0x017F
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	29 f0       	breq	.+10     	; 0x2190 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)();
    2186:	e0 91 7e 01 	lds	r30, 0x017E
    218a:	f0 91 7f 01 	lds	r31, 0x017F
    218e:	09 95       	icall
	}
}
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	ff 91       	pop	r31
    2196:	ef 91       	pop	r30
    2198:	bf 91       	pop	r27
    219a:	af 91       	pop	r26
    219c:	9f 91       	pop	r25
    219e:	8f 91       	pop	r24
    21a0:	7f 91       	pop	r23
    21a2:	6f 91       	pop	r22
    21a4:	5f 91       	pop	r21
    21a6:	4f 91       	pop	r20
    21a8:	3f 91       	pop	r19
    21aa:	2f 91       	pop	r18
    21ac:	0f 90       	pop	r0
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	0f 90       	pop	r0
    21b2:	1f 90       	pop	r1
    21b4:	18 95       	reti

000021b6 <__vector_8>:

/**************************************************************************
 *                              Timer1
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    21b6:	1f 92       	push	r1
    21b8:	0f 92       	push	r0
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	0f 92       	push	r0
    21be:	11 24       	eor	r1, r1
    21c0:	2f 93       	push	r18
    21c2:	3f 93       	push	r19
    21c4:	4f 93       	push	r20
    21c6:	5f 93       	push	r21
    21c8:	6f 93       	push	r22
    21ca:	7f 93       	push	r23
    21cc:	8f 93       	push	r24
    21ce:	9f 93       	push	r25
    21d0:	af 93       	push	r26
    21d2:	bf 93       	push	r27
    21d4:	ef 93       	push	r30
    21d6:	ff 93       	push	r31
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    21e0:	80 91 80 01 	lds	r24, 0x0180
    21e4:	90 91 81 01 	lds	r25, 0x0181
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	29 f0       	breq	.+10     	; 0x21f6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)();
    21ec:	e0 91 80 01 	lds	r30, 0x0180
    21f0:	f0 91 81 01 	lds	r31, 0x0181
    21f4:	09 95       	icall
	}
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	ff 91       	pop	r31
    21fc:	ef 91       	pop	r30
    21fe:	bf 91       	pop	r27
    2200:	af 91       	pop	r26
    2202:	9f 91       	pop	r25
    2204:	8f 91       	pop	r24
    2206:	7f 91       	pop	r23
    2208:	6f 91       	pop	r22
    220a:	5f 91       	pop	r21
    220c:	4f 91       	pop	r20
    220e:	3f 91       	pop	r19
    2210:	2f 91       	pop	r18
    2212:	0f 90       	pop	r0
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	0f 90       	pop	r0
    2218:	1f 90       	pop	r1
    221a:	18 95       	reti

0000221c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    221c:	1f 92       	push	r1
    221e:	0f 92       	push	r0
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	0f 92       	push	r0
    2224:	11 24       	eor	r1, r1
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	5f 93       	push	r21
    222e:	6f 93       	push	r22
    2230:	7f 93       	push	r23
    2232:	8f 93       	push	r24
    2234:	9f 93       	push	r25
    2236:	af 93       	push	r26
    2238:	bf 93       	push	r27
    223a:	ef 93       	push	r30
    223c:	ff 93       	push	r31
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    2246:	80 91 80 01 	lds	r24, 0x0180
    224a:	90 91 81 01 	lds	r25, 0x0181
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	29 f0       	breq	.+10     	; 0x225c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)();
    2252:	e0 91 80 01 	lds	r30, 0x0180
    2256:	f0 91 81 01 	lds	r31, 0x0181
    225a:	09 95       	icall
	}
}
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	ff 91       	pop	r31
    2262:	ef 91       	pop	r30
    2264:	bf 91       	pop	r27
    2266:	af 91       	pop	r26
    2268:	9f 91       	pop	r25
    226a:	8f 91       	pop	r24
    226c:	7f 91       	pop	r23
    226e:	6f 91       	pop	r22
    2270:	5f 91       	pop	r21
    2272:	4f 91       	pop	r20
    2274:	3f 91       	pop	r19
    2276:	2f 91       	pop	r18
    2278:	0f 90       	pop	r0
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	0f 90       	pop	r0
    227e:	1f 90       	pop	r1
    2280:	18 95       	reti

00002282 <__vector_4>:

/**************************************************************************
 *                              Timer2
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    2282:	1f 92       	push	r1
    2284:	0f 92       	push	r0
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	0f 92       	push	r0
    228a:	11 24       	eor	r1, r1
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	ef 93       	push	r30
    22a2:	ff 93       	push	r31
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    22ac:	80 91 82 01 	lds	r24, 0x0182
    22b0:	90 91 83 01 	lds	r25, 0x0183
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	29 f0       	breq	.+10     	; 0x22c2 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)();
    22b8:	e0 91 82 01 	lds	r30, 0x0182
    22bc:	f0 91 83 01 	lds	r31, 0x0183
    22c0:	09 95       	icall
	}
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	ff 91       	pop	r31
    22c8:	ef 91       	pop	r30
    22ca:	bf 91       	pop	r27
    22cc:	af 91       	pop	r26
    22ce:	9f 91       	pop	r25
    22d0:	8f 91       	pop	r24
    22d2:	7f 91       	pop	r23
    22d4:	6f 91       	pop	r22
    22d6:	5f 91       	pop	r21
    22d8:	4f 91       	pop	r20
    22da:	3f 91       	pop	r19
    22dc:	2f 91       	pop	r18
    22de:	0f 90       	pop	r0
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	0f 90       	pop	r0
    22e4:	1f 90       	pop	r1
    22e6:	18 95       	reti

000022e8 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    22e8:	1f 92       	push	r1
    22ea:	0f 92       	push	r0
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	0f 92       	push	r0
    22f0:	11 24       	eor	r1, r1
    22f2:	2f 93       	push	r18
    22f4:	3f 93       	push	r19
    22f6:	4f 93       	push	r20
    22f8:	5f 93       	push	r21
    22fa:	6f 93       	push	r22
    22fc:	7f 93       	push	r23
    22fe:	8f 93       	push	r24
    2300:	9f 93       	push	r25
    2302:	af 93       	push	r26
    2304:	bf 93       	push	r27
    2306:	ef 93       	push	r30
    2308:	ff 93       	push	r31
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    2312:	80 91 82 01 	lds	r24, 0x0182
    2316:	90 91 83 01 	lds	r25, 0x0183
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	29 f0       	breq	.+10     	; 0x2328 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)();
    231e:	e0 91 82 01 	lds	r30, 0x0182
    2322:	f0 91 83 01 	lds	r31, 0x0183
    2326:	09 95       	icall
	}
}
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0
    234a:	1f 90       	pop	r1
    234c:	18 95       	reti

0000234e <Timer_init>:
 *
 * [Returns]:        VOID
 ***************************************************************************************************/

void Timer_init(const Timer_Config * Config_Ptr)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	6a 97       	sbiw	r28, 0x1a	; 26
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    2366:	e9 81       	ldd	r30, Y+1	; 0x01
    2368:	fa 81       	ldd	r31, Y+2	; 0x02
    236a:	80 85       	ldd	r24, Z+8	; 0x08
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	3a 8f       	std	Y+26, r19	; 0x1a
    2372:	29 8f       	std	Y+25, r18	; 0x19
    2374:	89 8d       	ldd	r24, Y+25	; 0x19
    2376:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	91 05       	cpc	r25, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <Timer_init+0x32>
    237e:	cf c0       	rjmp	.+414    	; 0x251e <Timer_init+0x1d0>
    2380:	e9 8d       	ldd	r30, Y+25	; 0x19
    2382:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2384:	e2 30       	cpi	r30, 0x02	; 2
    2386:	f1 05       	cpc	r31, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <Timer_init+0x3e>
    238a:	9c c1       	rjmp	.+824    	; 0x26c4 <Timer_init+0x376>
    238c:	29 8d       	ldd	r18, Y+25	; 0x19
    238e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2390:	21 15       	cp	r18, r1
    2392:	31 05       	cpc	r19, r1
    2394:	09 f0       	breq	.+2      	; 0x2398 <Timer_init+0x4a>
    2396:	5e c2       	rjmp	.+1212   	; 0x2854 <Timer_init+0x506>
	{

	case Timer0:

		/*Clear registers of Timer0 before accessing any of them*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    2398:	e3 e5       	ldi	r30, 0x53	; 83
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	30 81       	ld	r19, Z
    239e:	e3 e5       	ldi	r30, 0x53	; 83
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    23a4:	e2 e5       	ldi	r30, 0x52	; 82
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	e2 e5       	ldi	r30, 0x52	; 82
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    23b0:	ec e5       	ldi	r30, 0x5C	; 92
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	90 81       	ld	r25, Z
    23b6:	ec e5       	ldi	r30, 0x5C	; 92
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    23bc:	e9 e5       	ldi	r30, 0x59	; 89
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	20 81       	ld	r18, Z
    23c2:	e9 e5       	ldi	r30, 0x59	; 89
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1
		/*
		 * Configure initial value for Timer0 to start count from it
		 * 0XFF so that value doesn't exceed 8_bits
		 */

		TIMER0_CONTROL_REGIRSTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    23c8:	23 e5       	ldi	r18, 0x53	; 83
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	e9 81       	ldd	r30, Y+1	; 0x01
    23ce:	fa 81       	ldd	r31, Y+2	; 0x02
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	a2 81       	ldd	r26, Z+2	; 0x02
    23d6:	b3 81       	ldd	r27, Z+3	; 0x03
    23d8:	f9 01       	movw	r30, r18
    23da:	80 83       	st	Z, r24
		 * TIMER Pre-scaler value for Timer0 in TCCR0 Register
		 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
		 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
		 */

		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    23dc:	a3 e5       	ldi	r26, 0x53	; 83
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e3 e5       	ldi	r30, 0x53	; 83
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	98 2f       	mov	r25, r24
    23e8:	98 7f       	andi	r25, 0xF8	; 248
    23ea:	e9 81       	ldd	r30, Y+1	; 0x01
    23ec:	fa 81       	ldd	r31, Y+2	; 0x02
    23ee:	81 85       	ldd	r24, Z+9	; 0x09
    23f0:	89 2b       	or	r24, r25
    23f2:	8c 93       	st	X, r24
		 * Compare output mode:
		 *                     OC0 disconnected
		 *                     Clear COM00 bit in TCCR0 register
		 *                     Clear COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    23f4:	23 e5       	ldi	r18, 0x53	; 83
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	a3 e5       	ldi	r26, 0x53	; 83
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e3 e5       	ldi	r30, 0x53	; 83
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 7e       	andi	r24, 0xEF	; 239
    2404:	8c 93       	st	X, r24
    2406:	8c 91       	ld	r24, X
    2408:	f9 01       	movw	r30, r18
    240a:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    240c:	23 e5       	ldi	r18, 0x53	; 83
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	a3 e5       	ldi	r26, 0x53	; 83
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e3 e5       	ldi	r30, 0x53	; 83
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	8c 93       	st	X, r24
    241e:	8c 91       	ld	r24, X
    2420:	f9 01       	movw	r30, r18
    2422:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	82 85       	ldd	r24, Z+10	; 0x0a
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	3c 8b       	std	Y+20, r19	; 0x14
    2430:	2b 8b       	std	Y+19, r18	; 0x13
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	31 f0       	breq	.+12     	; 0x2446 <Timer_init+0xf8>
    243a:	eb 89       	ldd	r30, Y+19	; 0x13
    243c:	fc 89       	ldd	r31, Y+20	; 0x14
    243e:	e1 30       	cpi	r30, 0x01	; 1
    2440:	f1 05       	cpc	r31, r1
    2442:	91 f1       	breq	.+100    	; 0x24a8 <Timer_init+0x15a>
    2444:	07 c2       	rjmp	.+1038   	; 0x2854 <Timer_init+0x506>
			/*
			 * Normal Overflow mode:
			 *                      Clear WGM00 bit in TCCR0 register
			 *                      Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    2446:	23 e5       	ldi	r18, 0x53	; 83
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	a3 e5       	ldi	r26, 0x53	; 83
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e3 e5       	ldi	r30, 0x53	; 83
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8f 7b       	andi	r24, 0xBF	; 191
    2456:	8c 93       	st	X, r24
    2458:	8c 91       	ld	r24, X
    245a:	f9 01       	movw	r30, r18
    245c:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    245e:	23 e5       	ldi	r18, 0x53	; 83
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	a3 e5       	ldi	r26, 0x53	; 83
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e3 e5       	ldi	r30, 0x53	; 83
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	87 7f       	andi	r24, 0xF7	; 247
    246e:	8c 93       	st	X, r24
    2470:	8c 91       	ld	r24, X
    2472:	f9 01       	movw	r30, r18
    2474:	80 83       	st	Z, r24

			/*
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2476:	23 e5       	ldi	r18, 0x53	; 83
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 68       	ori	r24, 0x80	; 128
    2486:	8c 93       	st	X, r24
    2488:	8c 91       	ld	r24, X
    248a:	f9 01       	movw	r30, r18
    248c:	80 83       	st	Z, r24


			/*
			 * Enable Timer0 overflow interrupt
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    248e:	29 e5       	ldi	r18, 0x59	; 89
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	a9 e5       	ldi	r26, 0x59	; 89
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e9 e5       	ldi	r30, 0x59	; 89
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	81 60       	ori	r24, 0x01	; 1
    249e:	8c 93       	st	X, r24
    24a0:	8c 91       	ld	r24, X
    24a2:	f9 01       	movw	r30, r18
    24a4:	80 83       	st	Z, r24
    24a6:	d6 c1       	rjmp	.+940    	; 0x2854 <Timer_init+0x506>
			/*
			 * Compare mode:
			 *              Clear WGM00 bit in TCCR0 register
			 *              Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    24a8:	23 e5       	ldi	r18, 0x53	; 83
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	a3 e5       	ldi	r26, 0x53	; 83
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e3 e5       	ldi	r30, 0x53	; 83
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7b       	andi	r24, 0xBF	; 191
    24b8:	8c 93       	st	X, r24
    24ba:	8c 91       	ld	r24, X
    24bc:	f9 01       	movw	r30, r18
    24be:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    24c0:	23 e5       	ldi	r18, 0x53	; 83
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	a3 e5       	ldi	r26, 0x53	; 83
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e3 e5       	ldi	r30, 0x53	; 83
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 60       	ori	r24, 0x08	; 8
    24d0:	8c 93       	st	X, r24
    24d2:	8c 91       	ld	r24, X
    24d4:	f9 01       	movw	r30, r18
    24d6:	80 83       	st	Z, r24

			/*
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    24d8:	23 e5       	ldi	r18, 0x53	; 83
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	a3 e5       	ldi	r26, 0x53	; 83
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e3 e5       	ldi	r30, 0x53	; 83
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 68       	ori	r24, 0x80	; 128
    24e8:	8c 93       	st	X, r24
    24ea:	8c 91       	ld	r24, X
    24ec:	f9 01       	movw	r30, r18
    24ee:	80 83       	st	Z, r24

			/*
			 * Configure initial value for Timer0 to start count from it
			 * 0XFF so that value doesn't exceed 8_bits
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    24f0:	2c e5       	ldi	r18, 0x5C	; 92
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	84 81       	ldd	r24, Z+4	; 0x04
    24fa:	95 81       	ldd	r25, Z+5	; 0x05
    24fc:	a6 81       	ldd	r26, Z+6	; 0x06
    24fe:	b7 81       	ldd	r27, Z+7	; 0x07
    2500:	f9 01       	movw	r30, r18
    2502:	80 83       	st	Z, r24

			/*
			 * Enable Timer0 compare match interrupt
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2504:	29 e5       	ldi	r18, 0x59	; 89
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	a9 e5       	ldi	r26, 0x59	; 89
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e9 e5       	ldi	r30, 0x59	; 89
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	82 60       	ori	r24, 0x02	; 2
    2514:	8c 93       	st	X, r24
    2516:	8c 91       	ld	r24, X
    2518:	f9 01       	movw	r30, r18
    251a:	80 83       	st	Z, r24
    251c:	9b c1       	rjmp	.+822    	; 0x2854 <Timer_init+0x506>


		case Timer1:

			/*Clear registers of Timer1 before accessing any of them*/
			TIMER1_CONTROL_REGIRSTER_A        &= 0X00;
    251e:	ef e4       	ldi	r30, 0x4F	; 79
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	20 81       	ld	r18, Z
    2524:	ef e4       	ldi	r30, 0x4F	; 79
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	10 82       	st	Z, r1
			TIMER1_CONTROL_REGIRSTER_B        &= 0X00;
    252a:	ee e4       	ldi	r30, 0x4E	; 78
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	30 81       	ld	r19, Z
    2530:	ee e4       	ldi	r30, 0x4E	; 78
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	10 82       	st	Z, r1
			TIMER1_INITIAL_VALUE_REGISTER     &= 0X00;
    2536:	ec e4       	ldi	r30, 0x4C	; 76
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	ec e4       	ldi	r30, 0x4C	; 76
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	10 82       	st	Z, r1
			TIMER1_OUTPUT_COMPARE_REGISTER_A  &= 0X00;
    2546:	ea e4       	ldi	r30, 0x4A	; 74
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	20 81       	ld	r18, Z
    254c:	31 81       	ldd	r19, Z+1	; 0x01
    254e:	ea e4       	ldi	r30, 0x4A	; 74
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	11 82       	std	Z+1, r1	; 0x01
    2554:	10 82       	st	Z, r1
			TIMER1_INTERRUPT_MASK_REGISTER    &= 0X00;
    2556:	e9 e5       	ldi	r30, 0x59	; 89
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	30 81       	ld	r19, Z
    255c:	e9 e5       	ldi	r30, 0x59	; 89
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	10 82       	st	Z, r1

			/*
			 * Configure initial value for Timer1 to start count from it
			 * 0XFFFF so that value doesn't exceed 16_bits
			 */
			TIMER1_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    2562:	2c e4       	ldi	r18, 0x4C	; 76
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	a2 81       	ldd	r26, Z+2	; 0x02
    2570:	b3 81       	ldd	r27, Z+3	; 0x03
    2572:	f9 01       	movw	r30, r18
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
			/*
			 * TIMER Pre-scaler value for Timer1 in TCCR1B Register
			 * 0XF8 to make sure that the least 3-bits in TCCR1B register=0
			 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
			 */
			TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & 0XF8) | (Config_Ptr->timer_clock);
    2578:	ae e4       	ldi	r26, 0x4E	; 78
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ee e4       	ldi	r30, 0x4E	; 78
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	98 2f       	mov	r25, r24
    2584:	98 7f       	andi	r25, 0xF8	; 248
    2586:	e9 81       	ldd	r30, Y+1	; 0x01
    2588:	fa 81       	ldd	r31, Y+2	; 0x02
    258a:	81 85       	ldd	r24, Z+9	; 0x09
    258c:	89 2b       	or	r24, r25
    258e:	8c 93       	st	X, r24
			 * Compare mode:
			 *              OC1A/OC1B disconnected
			 *              Clear COM1A0/COM1A1 bits in TCCR1A register
			 *              Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0X0F;
    2590:	af e4       	ldi	r26, 0x4F	; 79
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	ef e4       	ldi	r30, 0x4F	; 79
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    259e:	e9 81       	ldd	r30, Y+1	; 0x01
    25a0:	fa 81       	ldd	r31, Y+2	; 0x02
    25a2:	82 85       	ldd	r24, Z+10	; 0x0a
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	3b 87       	std	Y+11, r19	; 0x0b
    25aa:	2a 87       	std	Y+10, r18	; 0x0a
    25ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <Timer_init+0x272>
    25b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    25b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    25b8:	e1 30       	cpi	r30, 0x01	; 1
    25ba:	f1 05       	cpc	r31, r1
    25bc:	a1 f1       	breq	.+104    	; 0x2626 <Timer_init+0x2d8>
    25be:	4a c1       	rjmp	.+660    	; 0x2854 <Timer_init+0x506>
				/*
				 * Normal Overflow mode:
				 *                      Clear WGM10/WMG11 bit in TCCR1A register
				 *                      Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    25c0:	af e4       	ldi	r26, 0x4F	; 79
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ef e4       	ldi	r30, 0x4F	; 79
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8c 7f       	andi	r24, 0xFC	; 252
    25cc:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = TIMER1_CONTROL_REGIRSTER_B & 0XE7 ;
    25ce:	ae e4       	ldi	r26, 0x4E	; 78
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ee e4       	ldi	r30, 0x4E	; 78
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	87 7e       	andi	r24, 0xE7	; 231
    25da:	8c 93       	st	X, r24

				/*
				 * Make FOC1A/FOC1B to be Active as it is overflow mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    25dc:	2f e4       	ldi	r18, 0x4F	; 79
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	af e4       	ldi	r26, 0x4F	; 79
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	ef e4       	ldi	r30, 0x4F	; 79
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 60       	ori	r24, 0x08	; 8
    25ec:	8c 93       	st	X, r24
    25ee:	8c 91       	ld	r24, X
    25f0:	f9 01       	movw	r30, r18
    25f2:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    25f4:	2f e4       	ldi	r18, 0x4F	; 79
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	af e4       	ldi	r26, 0x4F	; 79
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	ef e4       	ldi	r30, 0x4F	; 79
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	84 60       	ori	r24, 0x04	; 4
    2604:	8c 93       	st	X, r24
    2606:	8c 91       	ld	r24, X
    2608:	f9 01       	movw	r30, r18
    260a:	80 83       	st	Z, r24


				/*
				 * Enable Timer1 overflow interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    260c:	29 e5       	ldi	r18, 0x59	; 89
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	a9 e5       	ldi	r26, 0x59	; 89
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e9 e5       	ldi	r30, 0x59	; 89
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	84 60       	ori	r24, 0x04	; 4
    261c:	8c 93       	st	X, r24
    261e:	8c 91       	ld	r24, X
    2620:	f9 01       	movw	r30, r18
    2622:	80 83       	st	Z, r24
    2624:	17 c1       	rjmp	.+558    	; 0x2854 <Timer_init+0x506>
				 *  Compare mode:
				 *              Clear WGM10/WGM11 bits in TCCR1A register
				 *              Set WGM12 bit in TCCR1B register
				 *              Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    2626:	af e4       	ldi	r26, 0x4F	; 79
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ef e4       	ldi	r30, 0x4F	; 79
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8c 7f       	andi	r24, 0xFC	; 252
    2632:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2634:	2e e4       	ldi	r18, 0x4E	; 78
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	ae e4       	ldi	r26, 0x4E	; 78
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ee e4       	ldi	r30, 0x4E	; 78
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	88 60       	ori	r24, 0x08	; 8
    2644:	8c 93       	st	X, r24
    2646:	8c 91       	ld	r24, X
    2648:	f9 01       	movw	r30, r18
    264a:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B = CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    264c:	2e e4       	ldi	r18, 0x4E	; 78
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	ae e4       	ldi	r26, 0x4E	; 78
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ee e4       	ldi	r30, 0x4E	; 78
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7e       	andi	r24, 0xEF	; 239
    265c:	8c 93       	st	X, r24
    265e:	8c 91       	ld	r24, X
    2660:	f9 01       	movw	r30, r18
    2662:	80 83       	st	Z, r24

				/*
				 *  Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2664:	2f e4       	ldi	r18, 0x4F	; 79
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	af e4       	ldi	r26, 0x4F	; 79
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ef e4       	ldi	r30, 0x4F	; 79
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	88 60       	ori	r24, 0x08	; 8
    2674:	8c 93       	st	X, r24
    2676:	8c 91       	ld	r24, X
    2678:	f9 01       	movw	r30, r18
    267a:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    267c:	2f e4       	ldi	r18, 0x4F	; 79
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	af e4       	ldi	r26, 0x4F	; 79
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	ef e4       	ldi	r30, 0x4F	; 79
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	84 60       	ori	r24, 0x04	; 4
    268c:	8c 93       	st	X, r24
    268e:	8c 91       	ld	r24, X
    2690:	f9 01       	movw	r30, r18
    2692:	80 83       	st	Z, r24

				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * 0XFFFF so that value doesn't exceed 16_bits
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    2694:	2a e4       	ldi	r18, 0x4A	; 74
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	84 81       	ldd	r24, Z+4	; 0x04
    269e:	95 81       	ldd	r25, Z+5	; 0x05
    26a0:	a6 81       	ldd	r26, Z+6	; 0x06
    26a2:	b7 81       	ldd	r27, Z+7	; 0x07
    26a4:	f9 01       	movw	r30, r18
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 compare match interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    26aa:	29 e5       	ldi	r18, 0x59	; 89
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	a9 e5       	ldi	r26, 0x59	; 89
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e9 e5       	ldi	r30, 0x59	; 89
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	80 61       	ori	r24, 0x10	; 16
    26ba:	8c 93       	st	X, r24
    26bc:	8c 91       	ld	r24, X
    26be:	f9 01       	movw	r30, r18
    26c0:	80 83       	st	Z, r24
    26c2:	c8 c0       	rjmp	.+400    	; 0x2854 <Timer_init+0x506>


			case Timer2:

				/*Clear registers of Timer0 before accessing any of them*/
				TIMER2_CONTROL_REGIRSTER        &= 0X00;
    26c4:	e5 e4       	ldi	r30, 0x45	; 69
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	20 81       	ld	r18, Z
    26ca:	e5 e4       	ldi	r30, 0x45	; 69
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	10 82       	st	Z, r1
				TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    26d0:	e4 e4       	ldi	r30, 0x44	; 68
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	30 81       	ld	r19, Z
    26d6:	e4 e4       	ldi	r30, 0x44	; 68
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	10 82       	st	Z, r1
				TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    26dc:	e3 e4       	ldi	r30, 0x43	; 67
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	e3 e4       	ldi	r30, 0x43	; 67
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	10 82       	st	Z, r1
				TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    26e8:	e9 e5       	ldi	r30, 0x59	; 89
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	90 81       	ld	r25, Z
    26ee:	e9 e5       	ldi	r30, 0x59	; 89
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	10 82       	st	Z, r1
				ASSR  &= 0X00;
    26f4:	e2 e4       	ldi	r30, 0x42	; 66
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	20 81       	ld	r18, Z
    26fa:	e2 e4       	ldi	r30, 0x42	; 66
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	10 82       	st	Z, r1
				/*
				 * Configure initial value for Timer2 to start count from it
				 * 0XFF so that value doesn't exceed 8_bits
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    2700:	24 e4       	ldi	r18, 0x44	; 68
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	e9 81       	ldd	r30, Y+1	; 0x01
    2706:	fa 81       	ldd	r31, Y+2	; 0x02
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	a2 81       	ldd	r26, Z+2	; 0x02
    270e:	b3 81       	ldd	r27, Z+3	; 0x03
    2710:	f9 01       	movw	r30, r18
    2712:	80 83       	st	Z, r24
				/*
				 * TIMER Pre-scaler value for Timer2 in TCCR2 Register
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
				 */
				TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    2714:	a5 e4       	ldi	r26, 0x45	; 69
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e5 e4       	ldi	r30, 0x45	; 69
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	98 2f       	mov	r25, r24
    2720:	98 7f       	andi	r25, 0xF8	; 248
    2722:	e9 81       	ldd	r30, Y+1	; 0x01
    2724:	fa 81       	ldd	r31, Y+2	; 0x02
    2726:	81 85       	ldd	r24, Z+9	; 0x09
    2728:	89 2b       	or	r24, r25
    272a:	8c 93       	st	X, r24
				 *  Compare mode:
				 *              OC2 disconnected
				 *              Clear COM20 bit in TCCR2 register
				 *              Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    272c:	25 e4       	ldi	r18, 0x45	; 69
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	a5 e4       	ldi	r26, 0x45	; 69
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e5 e4       	ldi	r30, 0x45	; 69
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8f 7e       	andi	r24, 0xEF	; 239
    273c:	8c 93       	st	X, r24
    273e:	8c 91       	ld	r24, X
    2740:	f9 01       	movw	r30, r18
    2742:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    2744:	25 e4       	ldi	r18, 0x45	; 69
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	a5 e4       	ldi	r26, 0x45	; 69
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e5 e4       	ldi	r30, 0x45	; 69
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7d       	andi	r24, 0xDF	; 223
    2754:	8c 93       	st	X, r24
    2756:	8c 91       	ld	r24, X
    2758:	f9 01       	movw	r30, r18
    275a:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	82 85       	ldd	r24, Z+10	; 0x0a
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	3c 83       	std	Y+4, r19	; 0x04
    2768:	2b 83       	std	Y+3, r18	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	31 f0       	breq	.+12     	; 0x277e <Timer_init+0x430>
    2772:	eb 81       	ldd	r30, Y+3	; 0x03
    2774:	fc 81       	ldd	r31, Y+4	; 0x04
    2776:	e1 30       	cpi	r30, 0x01	; 1
    2778:	f1 05       	cpc	r31, r1
    277a:	91 f1       	breq	.+100    	; 0x27e0 <Timer_init+0x492>
    277c:	6b c0       	rjmp	.+214    	; 0x2854 <Timer_init+0x506>
					/*
					 * Normal Overflow mode:
					 *                      Clear WGM00 bit in TCCR0 register
					 *                      Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    277e:	25 e4       	ldi	r18, 0x45	; 69
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	a5 e4       	ldi	r26, 0x45	; 69
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e4       	ldi	r30, 0x45	; 69
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8f 7b       	andi	r24, 0xBF	; 191
    278e:	8c 93       	st	X, r24
    2790:	8c 91       	ld	r24, X
    2792:	f9 01       	movw	r30, r18
    2794:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2796:	25 e4       	ldi	r18, 0x45	; 69
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	a5 e4       	ldi	r26, 0x45	; 69
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e5 e4       	ldi	r30, 0x45	; 69
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	87 7f       	andi	r24, 0xF7	; 247
    27a6:	8c 93       	st	X, r24
    27a8:	8c 91       	ld	r24, X
    27aa:	f9 01       	movw	r30, r18
    27ac:	80 83       	st	Z, r24

					/*
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    27ae:	25 e4       	ldi	r18, 0x45	; 69
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	a5 e4       	ldi	r26, 0x45	; 69
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e5 e4       	ldi	r30, 0x45	; 69
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	80 68       	ori	r24, 0x80	; 128
    27be:	8c 93       	st	X, r24
    27c0:	8c 91       	ld	r24, X
    27c2:	f9 01       	movw	r30, r18
    27c4:	80 83       	st	Z, r24


					/*
					 * Enable Timer2 overflow interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    27c6:	29 e5       	ldi	r18, 0x59	; 89
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	a9 e5       	ldi	r26, 0x59	; 89
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e9 e5       	ldi	r30, 0x59	; 89
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 64       	ori	r24, 0x40	; 64
    27d6:	8c 93       	st	X, r24
    27d8:	8c 91       	ld	r24, X
    27da:	f9 01       	movw	r30, r18
    27dc:	80 83       	st	Z, r24
    27de:	3a c0       	rjmp	.+116    	; 0x2854 <Timer_init+0x506>
					/*
					 *  Compare mode:
					 *               Clear WGM20 bit in TCCR2 register
					 *               Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    27e0:	25 e4       	ldi	r18, 0x45	; 69
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	a5 e4       	ldi	r26, 0x45	; 69
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e5 e4       	ldi	r30, 0x45	; 69
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 7b       	andi	r24, 0xBF	; 191
    27f0:	8c 93       	st	X, r24
    27f2:	8c 91       	ld	r24, X
    27f4:	f9 01       	movw	r30, r18
    27f6:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    27f8:	25 e4       	ldi	r18, 0x45	; 69
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	a5 e4       	ldi	r26, 0x45	; 69
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e5 e4       	ldi	r30, 0x45	; 69
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 60       	ori	r24, 0x08	; 8
    2808:	8c 93       	st	X, r24
    280a:	8c 91       	ld	r24, X
    280c:	f9 01       	movw	r30, r18
    280e:	80 83       	st	Z, r24

					/*
					 *  Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    2810:	25 e4       	ldi	r18, 0x45	; 69
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	a5 e4       	ldi	r26, 0x45	; 69
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e5 e4       	ldi	r30, 0x45	; 69
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 68       	ori	r24, 0x80	; 128
    2820:	8c 93       	st	X, r24
    2822:	8c 91       	ld	r24, X
    2824:	f9 01       	movw	r30, r18
    2826:	80 83       	st	Z, r24
					/*
					 * Configure compare match value for Timer2 to start count from it
					 * 0XFF so that value doesn't exceed 8_bits
					 */

					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    2828:	23 e4       	ldi	r18, 0x43	; 67
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	84 81       	ldd	r24, Z+4	; 0x04
    2832:	95 81       	ldd	r25, Z+5	; 0x05
    2834:	a6 81       	ldd	r26, Z+6	; 0x06
    2836:	b7 81       	ldd	r27, Z+7	; 0x07
    2838:	f9 01       	movw	r30, r18
    283a:	80 83       	st	Z, r24

					/*
					 * Enable Timer2 compare match interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    283c:	29 e5       	ldi	r18, 0x59	; 89
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	a9 e5       	ldi	r26, 0x59	; 89
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e9 e5       	ldi	r30, 0x59	; 89
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 68       	ori	r24, 0x80	; 128
    284c:	8c 93       	st	X, r24
    284e:	8c 91       	ld	r24, X
    2850:	f9 01       	movw	r30, r18
    2852:	80 83       	st	Z, r24

				break; /*End of Timer2*/

	}/*End of Super switch case*/

}/*End of the Timer_init*/
    2854:	6a 96       	adiw	r28, 0x1a	; 26
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <Timer_setCallBack>:
 *                             To use it to choose the type of the timer
 *
 * [Returns]:      VOID
 ***************************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <Timer_setCallBack+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <Timer_setCallBack+0x8>
    286e:	0f 92       	push	r0
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3d 83       	std	Y+5, r19	; 0x05
    2882:	2c 83       	std	Y+4, r18	; 0x04
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	81 f0       	breq	.+32     	; 0x28ae <Timer_setCallBack+0x48>
    288e:	2c 81       	ldd	r18, Y+4	; 0x04
    2890:	3d 81       	ldd	r19, Y+5	; 0x05
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	91 f0       	breq	.+36     	; 0x28bc <Timer_setCallBack+0x56>
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	9d 81       	ldd	r25, Y+5	; 0x05
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	a1 f4       	brne	.+40     	; 0x28c8 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	90 93 7f 01 	sts	0x017F, r25
    28a8:	80 93 7e 01 	sts	0x017E, r24
    28ac:	0d c0       	rjmp	.+26     	; 0x28c8 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	90 93 81 01 	sts	0x0181, r25
    28b6:	80 93 80 01 	sts	0x0180, r24
    28ba:	06 c0       	rjmp	.+12     	; 0x28c8 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	90 93 83 01 	sts	0x0183, r25
    28c4:	80 93 82 01 	sts	0x0182, r24
		break;
	}

}
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <Timer_stop>:
 * [Returns]:      VOID
 ***************************************************************************************************/


void Timer_stop(Timer_Type timer_type)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	00 d0       	rcall	.+0      	; 0x28de <Timer_stop+0x6>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	89 83       	std	Y+1, r24	; 0x01

	switch(timer_type)
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	3b 83       	std	Y+3, r19	; 0x03
    28ee:	2a 83       	std	Y+2, r18	; 0x02
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	91 05       	cpc	r25, r1
    28f8:	89 f0       	breq	.+34     	; 0x291c <Timer_stop+0x44>
    28fa:	2a 81       	ldd	r18, Y+2	; 0x02
    28fc:	3b 81       	ldd	r19, Y+3	; 0x03
    28fe:	22 30       	cpi	r18, 0x02	; 2
    2900:	31 05       	cpc	r19, r1
    2902:	a1 f0       	breq	.+40     	; 0x292c <Timer_stop+0x54>
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	b9 f4       	brne	.+46     	; 0x293a <Timer_stop+0x62>
	case Timer0:
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) ;
    290c:	a3 e5       	ldi	r26, 0x53	; 83
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e3 e5       	ldi	r30, 0x53	; 83
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	88 7f       	andi	r24, 0xF8	; 248
    2918:	8c 93       	st	X, r24
    291a:	0f c0       	rjmp	.+30     	; 0x293a <Timer_stop+0x62>

		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & 0XF8) ;
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	88 7f       	andi	r24, 0xF8	; 248
    2928:	8c 93       	st	X, r24
    292a:	07 c0       	rjmp	.+14     	; 0x293a <Timer_stop+0x62>
	case Timer2:
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) ;
    292c:	a5 e4       	ldi	r26, 0x45	; 69
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e5 e4       	ldi	r30, 0x45	; 69
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	88 7f       	andi	r24, 0xF8	; 248
    2938:	8c 93       	st	X, r24
		break;

	}


}
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <Timer_DeInit>:
 *
 * [Returns]:      VOID
 ***************************************************************************************************/

void Timer_DeInit(Timer_Type timer_type)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	62 97       	sbiw	r28, 0x12	; 18
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	3a 8b       	std	Y+18, r19	; 0x12
    2964:	29 8b       	std	Y+17, r18	; 0x11
    2966:	89 89       	ldd	r24, Y+17	; 0x11
    2968:	9a 89       	ldd	r25, Y+18	; 0x12
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	91 05       	cpc	r25, r1
    296e:	21 f1       	breq	.+72     	; 0x29b8 <Timer_DeInit+0x72>
    2970:	29 89       	ldd	r18, Y+17	; 0x11
    2972:	3a 89       	ldd	r19, Y+18	; 0x12
    2974:	22 30       	cpi	r18, 0x02	; 2
    2976:	31 05       	cpc	r19, r1
    2978:	09 f4       	brne	.+2      	; 0x297c <Timer_DeInit+0x36>
    297a:	41 c0       	rjmp	.+130    	; 0x29fe <Timer_DeInit+0xb8>
    297c:	89 89       	ldd	r24, Y+17	; 0x11
    297e:	9a 89       	ldd	r25, Y+18	; 0x12
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	09 f0       	breq	.+2      	; 0x2986 <Timer_DeInit+0x40>
    2984:	54 c0       	rjmp	.+168    	; 0x2a2e <Timer_DeInit+0xe8>
	{
	case Timer0:

		/*Clear all register in Timer0*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    2986:	e3 e5       	ldi	r30, 0x53	; 83
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	90 81       	ld	r25, Z
    298c:	e3 e5       	ldi	r30, 0x53	; 83
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    2992:	e2 e5       	ldi	r30, 0x52	; 82
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	20 81       	ld	r18, Z
    2998:	e2 e5       	ldi	r30, 0x52	; 82
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    299e:	ec e5       	ldi	r30, 0x5C	; 92
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	30 81       	ld	r19, Z
    29a4:	ec e5       	ldi	r30, 0x5C	; 92
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    29aa:	e9 e5       	ldi	r30, 0x59	; 89
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	e9 e5       	ldi	r30, 0x59	; 89
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	10 82       	st	Z, r1
    29b6:	3b c0       	rjmp	.+118    	; 0x2a2e <Timer_DeInit+0xe8>
		break;

	case Timer1:

		/*Clear all register in Timer1*/
		TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    29b8:	ef e4       	ldi	r30, 0x4F	; 79
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	90 81       	ld	r25, Z
    29be:	ef e4       	ldi	r30, 0x4F	; 79
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    29c4:	ee e4       	ldi	r30, 0x4E	; 78
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	20 81       	ld	r18, Z
    29ca:	ee e4       	ldi	r30, 0x4E	; 78
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    29d0:	ec e4       	ldi	r30, 0x4C	; 76
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	ec e4       	ldi	r30, 0x4C	; 76
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	11 82       	std	Z+1, r1	; 0x01
    29de:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    29e0:	ea e4       	ldi	r30, 0x4A	; 74
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	20 81       	ld	r18, Z
    29e6:	31 81       	ldd	r19, Z+1	; 0x01
    29e8:	ea e4       	ldi	r30, 0x4A	; 74
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	11 82       	std	Z+1, r1	; 0x01
    29ee:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    29f0:	e9 e5       	ldi	r30, 0x59	; 89
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	30 81       	ld	r19, Z
    29f6:	e9 e5       	ldi	r30, 0x59	; 89
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	10 82       	st	Z, r1
    29fc:	18 c0       	rjmp	.+48     	; 0x2a2e <Timer_DeInit+0xe8>


	case Timer2:

		/*Clear all register in Timer2*/
		TIMER2_CONTROL_REGIRSTER        &= 0X00;
    29fe:	e5 e4       	ldi	r30, 0x45	; 69
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	e5 e4       	ldi	r30, 0x45	; 69
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    2a0a:	e4 e4       	ldi	r30, 0x44	; 68
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	90 81       	ld	r25, Z
    2a10:	e4 e4       	ldi	r30, 0x44	; 68
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	10 82       	st	Z, r1
		TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    2a16:	e3 e4       	ldi	r30, 0x43	; 67
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	20 81       	ld	r18, Z
    2a1c:	e3 e4       	ldi	r30, 0x43	; 67
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    2a22:	e9 e5       	ldi	r30, 0x59	; 89
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	30 81       	ld	r19, Z
    2a28:	e9 e5       	ldi	r30, 0x59	; 89
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	10 82       	st	Z, r1
		break;

	}

}
    2a2e:	62 96       	adiw	r28, 0x12	; 18
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <UART_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_config * Config_Ptr)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <UART_init+0x6>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	9a 83       	std	Y+2, r25	; 0x02
    2a4c:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a4e:	eb e2       	ldi	r30, 0x2B	; 43
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2a56:	aa e2       	ldi	r26, 0x2A	; 42
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	ea e2       	ldi	r30, 0x2A	; 42
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	88 61       	ori	r24, 0x18	; 24
    2a62:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit , 1 Two stop bit
	 * UCSZ1:0 =  00 For 5-bit data mode ,01 For 6-bit data mode , 10 For 7-bit data mode,
	 *             11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
    2a64:	a0 e4       	ldi	r26, 0x40	; 64
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e0 e4       	ldi	r30, 0x40	; 64
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xBF ) | ( (Config_Ptr->mode) << 6);
    2a72:	a0 e4       	ldi	r26, 0x40	; 64
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e0 e4       	ldi	r30, 0x40	; 64
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	2f 7b       	andi	r18, 0xBF	; 191
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	80 81       	ld	r24, Z
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	00 24       	eor	r0, r0
    2a8c:	96 95       	lsr	r25
    2a8e:	87 95       	ror	r24
    2a90:	07 94       	ror	r0
    2a92:	96 95       	lsr	r25
    2a94:	87 95       	ror	r24
    2a96:	07 94       	ror	r0
    2a98:	98 2f       	mov	r25, r24
    2a9a:	80 2d       	mov	r24, r0
    2a9c:	82 2b       	or	r24, r18
    2a9e:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity) << 4);
    2aa0:	a0 e4       	ldi	r26, 0x40	; 64
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e0 e4       	ldi	r30, 0x40	; 64
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	28 2f       	mov	r18, r24
    2aac:	2f 7c       	andi	r18, 0xCF	; 207
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	81 81       	ldd	r24, Z+1	; 0x01
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	82 95       	swap	r24
    2aba:	92 95       	swap	r25
    2abc:	90 7f       	andi	r25, 0xF0	; 240
    2abe:	98 27       	eor	r25, r24
    2ac0:	80 7f       	andi	r24, 0xF0	; 240
    2ac2:	98 27       	eor	r25, r24
    2ac4:	82 2b       	or	r24, r18
    2ac6:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stop) << 3);
    2ac8:	a0 e4       	ldi	r26, 0x40	; 64
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e0 e4       	ldi	r30, 0x40	; 64
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	27 7f       	andi	r18, 0xF7	; 247
    2ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	82 2b       	or	r24, r18
    2aee:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->size) << 1);
    2af0:	a0 e4       	ldi	r26, 0x40	; 64
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e0 e4       	ldi	r30, 0x40	; 64
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	28 2f       	mov	r18, r24
    2afc:	29 7f       	andi	r18, 0xF9	; 249
    2afe:	e9 81       	ldd	r30, Y+1	; 0x01
    2b00:	fa 81       	ldd	r31, Y+2	; 0x02
    2b02:	83 81       	ldd	r24, Z+3	; 0x03
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	82 2b       	or	r24, r18
    2b0e:	8c 93       	st	X, r24

	UCSRC = ( UCSRC & 0xFE ) | ( Config_Ptr->mode );
    2b10:	a0 e4       	ldi	r26, 0x40	; 64
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e0 e4       	ldi	r30, 0x40	; 64
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	9e 7f       	andi	r25, 0xFE	; 254
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	80 81       	ld	r24, Z
    2b24:	89 2b       	or	r24, r25
    2b26:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2b28:	e0 e4       	ldi	r30, 0x40	; 64
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2b2e:	e9 e2       	ldi	r30, 0x29	; 41
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	8c e0       	ldi	r24, 0x0C	; 12
    2b34:	80 83       	st	Z, r24
}
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <UART_sendByte>:

void UART_sendByte(const uint8 data)

{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	0f 92       	push	r0
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
#ifndef INTERRUPTS_send
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b4c:	eb e2       	ldi	r30, 0x2B	; 43
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	80 72       	andi	r24, 0x20	; 32
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	b9 f3       	breq	.-18     	; 0x2b4c <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2b5e:	ec e2       	ldi	r30, 0x2C	; 44
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	80 83       	st	Z, r24
	 *******************************************************************/
#endif
#ifdef INTERRUPTS_send
 g_UART_dataToSend=data;
#endif
}
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
#ifndef INTERRUPTS_recieve
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b76:	eb e2       	ldi	r30, 0x2B	; 43
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 23       	and	r24, r24
    2b7e:	dc f7       	brge	.-10     	; 0x2b76 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data automatically */
	return UDR;
    2b80:	ec e2       	ldi	r30, 0x2C	; 44
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
#else

	return g_UART_dataRecieved;

#endif
}
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <UART_sendString+0x6>
    2b92:	0f 92       	push	r0
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	9b 83       	std	Y+3, r25	; 0x03
    2b9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b9c:	19 82       	std	Y+1, r1	; 0x01
    2b9e:	0e c0       	rjmp	.+28     	; 0x2bbc <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	fc 01       	movw	r30, r24
    2bac:	e2 0f       	add	r30, r18
    2bae:	f3 1f       	adc	r31, r19
    2bb0:	80 81       	ld	r24, Z
    2bb2:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_sendByte>
		i++;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e2 0f       	add	r30, r18
    2bca:	f3 1f       	adc	r31, r19
    2bcc:	80 81       	ld	r24, Z
    2bce:	88 23       	and	r24, r24
    2bd0:	39 f7       	brne	.-50     	; 0x2ba0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <UART_receiveString+0xa>
    2be8:	0f 92       	push	r0
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	9b 83       	std	Y+3, r25	; 0x03
    2bf0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bf2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	8c 01       	movw	r16, r24
    2c00:	02 0f       	add	r16, r18
    2c02:	13 1f       	adc	r17, r19
    2c04:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
    2c08:	f8 01       	movw	r30, r16
    2c0a:	80 83       	st	Z, r24
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	8c 01       	movw	r16, r24
    2c20:	02 0f       	add	r16, r18
    2c22:	13 1f       	adc	r17, r19
    2c24:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <UART_recieveByte>
    2c28:	f8 01       	movw	r30, r16
    2c2a:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	9b 81       	ldd	r25, Y+3	; 0x03
    2c36:	fc 01       	movw	r30, r24
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	80 81       	ld	r24, Z
    2c3e:	83 32       	cpi	r24, 0x23	; 35
    2c40:	31 f7       	brne	.-52     	; 0x2c0e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f3 1f       	adc	r31, r19
    2c52:	10 82       	st	Z, r1
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	08 95       	ret

00002c64 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <KeyPad_getPressedKey+0x6>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2c6e:	1a 82       	std	Y+2, r1	; 0x02
    2c70:	4c c0       	rjmp	.+152    	; 0x2d0a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    2c72:	ea e3       	ldi	r30, 0x3A	; 58
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	80 e1       	ldi	r24, 0x10	; 16
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <KeyPad_getPressedKey+0x22>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	2a 95       	dec	r18
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <KeyPad_getPressedKey+0x1e>
    2c8a:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2c8c:	eb e3       	ldi	r30, 0x3B	; 59
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	80 e1       	ldi	r24, 0x10	; 16
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <KeyPad_getPressedKey+0x3e>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <KeyPad_getPressedKey+0x3a>
    2ca6:	80 95       	com	r24
    2ca8:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    2caa:	19 82       	std	Y+1, r1	; 0x01
    2cac:	28 c0       	rjmp	.+80     	; 0x2cfe <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2cae:	e9 e3       	ldi	r30, 0x39	; 57
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	28 2f       	mov	r18, r24
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a9 01       	movw	r20, r18
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <KeyPad_getPressedKey+0x62>
    2cc2:	55 95       	asr	r21
    2cc4:	47 95       	ror	r20
    2cc6:	8a 95       	dec	r24
    2cc8:	e2 f7       	brpl	.-8      	; 0x2cc2 <KeyPad_getPressedKey+0x5e>
    2cca:	ca 01       	movw	r24, r20
    2ccc:	81 70       	andi	r24, 0x01	; 1
    2cce:	90 70       	andi	r25, 0x00	; 0
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	91 f4       	brne	.+36     	; 0x2cf8 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	89 0f       	add	r24, r25
    2ce8:	8f 5f       	subi	r24, 0xFF	; 255
    2cea:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	a8 f2       	brcs	.-86     	; 0x2cae <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	8a 83       	std	Y+2, r24	; 0x02
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	84 30       	cpi	r24, 0x04	; 4
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <KeyPad_getPressedKey+0xae>
    2d10:	b0 cf       	rjmp	.-160    	; 0x2c72 <KeyPad_getPressedKey+0xe>
    2d12:	ad cf       	rjmp	.-166    	; 0x2c6e <KeyPad_getPressedKey+0xa>

00002d14 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <KeyPad_4x4_adjustKeyNumber+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <KeyPad_4x4_adjustKeyNumber+0x8>
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	3c 83       	std	Y+4, r19	; 0x04
    2d2a:	2b 83       	std	Y+3, r18	; 0x03
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	88 30       	cpi	r24, 0x08	; 8
    2d32:	91 05       	cpc	r25, r1
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <KeyPad_4x4_adjustKeyNumber+0x24>
    2d36:	70 c0       	rjmp	.+224    	; 0x2e18 <KeyPad_4x4_adjustKeyNumber+0x104>
    2d38:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3c:	29 30       	cpi	r18, 0x09	; 9
    2d3e:	31 05       	cpc	r19, r1
    2d40:	5c f5       	brge	.+86     	; 0x2d98 <KeyPad_4x4_adjustKeyNumber+0x84>
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	84 30       	cpi	r24, 0x04	; 4
    2d48:	91 05       	cpc	r25, r1
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <KeyPad_4x4_adjustKeyNumber+0x3a>
    2d4c:	59 c0       	rjmp	.+178    	; 0x2e00 <KeyPad_4x4_adjustKeyNumber+0xec>
    2d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d50:	3c 81       	ldd	r19, Y+4	; 0x04
    2d52:	25 30       	cpi	r18, 0x05	; 5
    2d54:	31 05       	cpc	r19, r1
    2d56:	9c f4       	brge	.+38     	; 0x2d7e <KeyPad_4x4_adjustKeyNumber+0x6a>
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	91 05       	cpc	r25, r1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <KeyPad_4x4_adjustKeyNumber+0x50>
    2d62:	48 c0       	rjmp	.+144    	; 0x2df4 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2d64:	2b 81       	ldd	r18, Y+3	; 0x03
    2d66:	3c 81       	ldd	r19, Y+4	; 0x04
    2d68:	23 30       	cpi	r18, 0x03	; 3
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2d6e:	45 c0       	rjmp	.+138    	; 0x2dfa <KeyPad_4x4_adjustKeyNumber+0xe6>
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	91 05       	cpc	r25, r1
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <KeyPad_4x4_adjustKeyNumber+0x68>
    2d7a:	39 c0       	rjmp	.+114    	; 0x2dee <KeyPad_4x4_adjustKeyNumber+0xda>
    2d7c:	67 c0       	rjmp	.+206    	; 0x2e4c <KeyPad_4x4_adjustKeyNumber+0x138>
    2d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d80:	3c 81       	ldd	r19, Y+4	; 0x04
    2d82:	26 30       	cpi	r18, 0x06	; 6
    2d84:	31 05       	cpc	r19, r1
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <KeyPad_4x4_adjustKeyNumber+0x76>
    2d88:	41 c0       	rjmp	.+130    	; 0x2e0c <KeyPad_4x4_adjustKeyNumber+0xf8>
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	87 30       	cpi	r24, 0x07	; 7
    2d90:	91 05       	cpc	r25, r1
    2d92:	0c f0       	brlt	.+2      	; 0x2d96 <KeyPad_4x4_adjustKeyNumber+0x82>
    2d94:	3e c0       	rjmp	.+124    	; 0x2e12 <KeyPad_4x4_adjustKeyNumber+0xfe>
    2d96:	37 c0       	rjmp	.+110    	; 0x2e06 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2d98:	2b 81       	ldd	r18, Y+3	; 0x03
    2d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9c:	2c 30       	cpi	r18, 0x0C	; 12
    2d9e:	31 05       	cpc	r19, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <KeyPad_4x4_adjustKeyNumber+0x90>
    2da2:	46 c0       	rjmp	.+140    	; 0x2e30 <KeyPad_4x4_adjustKeyNumber+0x11c>
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	8d 30       	cpi	r24, 0x0D	; 13
    2daa:	91 05       	cpc	r25, r1
    2dac:	5c f4       	brge	.+22     	; 0x2dc4 <KeyPad_4x4_adjustKeyNumber+0xb0>
    2dae:	2b 81       	ldd	r18, Y+3	; 0x03
    2db0:	3c 81       	ldd	r19, Y+4	; 0x04
    2db2:	2a 30       	cpi	r18, 0x0A	; 10
    2db4:	31 05       	cpc	r19, r1
    2db6:	b1 f1       	breq	.+108    	; 0x2e24 <KeyPad_4x4_adjustKeyNumber+0x110>
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	8b 30       	cpi	r24, 0x0B	; 11
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	a4 f5       	brge	.+104    	; 0x2e2a <KeyPad_4x4_adjustKeyNumber+0x116>
    2dc2:	2d c0       	rjmp	.+90     	; 0x2e1e <KeyPad_4x4_adjustKeyNumber+0x10a>
    2dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc8:	2e 30       	cpi	r18, 0x0E	; 14
    2dca:	31 05       	cpc	r19, r1
    2dcc:	b9 f1       	breq	.+110    	; 0x2e3c <KeyPad_4x4_adjustKeyNumber+0x128>
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	8e 30       	cpi	r24, 0x0E	; 14
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	7c f1       	brlt	.+94     	; 0x2e36 <KeyPad_4x4_adjustKeyNumber+0x122>
    2dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dda:	3c 81       	ldd	r19, Y+4	; 0x04
    2ddc:	2f 30       	cpi	r18, 0x0F	; 15
    2dde:	31 05       	cpc	r19, r1
    2de0:	79 f1       	breq	.+94     	; 0x2e40 <KeyPad_4x4_adjustKeyNumber+0x12c>
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	80 31       	cpi	r24, 0x10	; 16
    2de8:	91 05       	cpc	r25, r1
    2dea:	69 f1       	breq	.+90     	; 0x2e46 <KeyPad_4x4_adjustKeyNumber+0x132>
    2dec:	2f c0       	rjmp	.+94     	; 0x2e4c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    2dee:	97 e0       	ldi	r25, 0x07	; 7
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	2e c0       	rjmp	.+92     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    2df4:	28 e0       	ldi	r18, 0x08	; 8
    2df6:	2a 83       	std	Y+2, r18	; 0x02
    2df8:	2b c0       	rjmp	.+86     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    2dfa:	39 e0       	ldi	r19, 0x09	; 9
    2dfc:	3a 83       	std	Y+2, r19	; 0x02
    2dfe:	28 c0       	rjmp	.+80     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    2e00:	85 e2       	ldi	r24, 0x25	; 37
    2e02:	8a 83       	std	Y+2, r24	; 0x02
    2e04:	25 c0       	rjmp	.+74     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2e06:	94 e0       	ldi	r25, 0x04	; 4
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	22 c0       	rjmp	.+68     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    2e0c:	25 e0       	ldi	r18, 0x05	; 5
    2e0e:	2a 83       	std	Y+2, r18	; 0x02
    2e10:	1f c0       	rjmp	.+62     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    2e12:	36 e0       	ldi	r19, 0x06	; 6
    2e14:	3a 83       	std	Y+2, r19	; 0x02
    2e16:	1c c0       	rjmp	.+56     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2e18:	8a e2       	ldi	r24, 0x2A	; 42
    2e1a:	8a 83       	std	Y+2, r24	; 0x02
    2e1c:	19 c0       	rjmp	.+50     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    2e1e:	91 e0       	ldi	r25, 0x01	; 1
    2e20:	9a 83       	std	Y+2, r25	; 0x02
    2e22:	16 c0       	rjmp	.+44     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    2e24:	22 e0       	ldi	r18, 0x02	; 2
    2e26:	2a 83       	std	Y+2, r18	; 0x02
    2e28:	13 c0       	rjmp	.+38     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2e2a:	33 e0       	ldi	r19, 0x03	; 3
    2e2c:	3a 83       	std	Y+2, r19	; 0x02
    2e2e:	10 c0       	rjmp	.+32     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2e30:	8d e2       	ldi	r24, 0x2D	; 45
    2e32:	8a 83       	std	Y+2, r24	; 0x02
    2e34:	0d c0       	rjmp	.+26     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2e36:	9d e0       	ldi	r25, 0x0D	; 13
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	0a c0       	rjmp	.+20     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2e3c:	1a 82       	std	Y+2, r1	; 0x02
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2e40:	2d e3       	ldi	r18, 0x3D	; 61
    2e42:	2a 83       	std	Y+2, r18	; 0x02
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2e46:	3b e2       	ldi	r19, 0x2B	; 43
    2e48:	3a 83       	std	Y+2, r19	; 0x02
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <__prologue_saves__>:
    2e60:	2f 92       	push	r2
    2e62:	3f 92       	push	r3
    2e64:	4f 92       	push	r4
    2e66:	5f 92       	push	r5
    2e68:	6f 92       	push	r6
    2e6a:	7f 92       	push	r7
    2e6c:	8f 92       	push	r8
    2e6e:	9f 92       	push	r9
    2e70:	af 92       	push	r10
    2e72:	bf 92       	push	r11
    2e74:	cf 92       	push	r12
    2e76:	df 92       	push	r13
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	ca 1b       	sub	r28, r26
    2e8a:	db 0b       	sbc	r29, r27
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	09 94       	ijmp

00002e98 <__epilogue_restores__>:
    2e98:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9a:	39 88       	ldd	r3, Y+17	; 0x11
    2e9c:	48 88       	ldd	r4, Y+16	; 0x10
    2e9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eaa:	b9 84       	ldd	r11, Y+9	; 0x09
    2eac:	c8 84       	ldd	r12, Y+8	; 0x08
    2eae:	df 80       	ldd	r13, Y+7	; 0x07
    2eb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eba:	b9 81       	ldd	r27, Y+1	; 0x01
    2ebc:	ce 0f       	add	r28, r30
    2ebe:	d1 1d       	adc	r29, r1
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	ed 01       	movw	r28, r26
    2ecc:	08 95       	ret

00002ece <itoa>:
    2ece:	fb 01       	movw	r30, r22
    2ed0:	9f 01       	movw	r18, r30
    2ed2:	e8 94       	clt
    2ed4:	42 30       	cpi	r20, 0x02	; 2
    2ed6:	c4 f0       	brlt	.+48     	; 0x2f08 <itoa+0x3a>
    2ed8:	45 32       	cpi	r20, 0x25	; 37
    2eda:	b4 f4       	brge	.+44     	; 0x2f08 <itoa+0x3a>
    2edc:	4a 30       	cpi	r20, 0x0A	; 10
    2ede:	29 f4       	brne	.+10     	; 0x2eea <itoa+0x1c>
    2ee0:	97 fb       	bst	r25, 7
    2ee2:	1e f4       	brtc	.+6      	; 0x2eea <itoa+0x1c>
    2ee4:	90 95       	com	r25
    2ee6:	81 95       	neg	r24
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	64 2f       	mov	r22, r20
    2eec:	77 27       	eor	r23, r23
    2eee:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__udivmodhi4>
    2ef2:	80 5d       	subi	r24, 0xD0	; 208
    2ef4:	8a 33       	cpi	r24, 0x3A	; 58
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <itoa+0x2c>
    2ef8:	89 5d       	subi	r24, 0xD9	; 217
    2efa:	81 93       	st	Z+, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	a1 f7       	brne	.-24     	; 0x2eea <itoa+0x1c>
    2f02:	16 f4       	brtc	.+4      	; 0x2f08 <itoa+0x3a>
    2f04:	5d e2       	ldi	r21, 0x2D	; 45
    2f06:	51 93       	st	Z+, r21
    2f08:	10 82       	st	Z, r1
    2f0a:	c9 01       	movw	r24, r18
    2f0c:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <strrev>

00002f10 <strrev>:
    2f10:	dc 01       	movw	r26, r24
    2f12:	fc 01       	movw	r30, r24
    2f14:	67 2f       	mov	r22, r23
    2f16:	71 91       	ld	r23, Z+
    2f18:	77 23       	and	r23, r23
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <strrev+0x4>
    2f1c:	32 97       	sbiw	r30, 0x02	; 2
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <strrev+0x18>
    2f20:	7c 91       	ld	r23, X
    2f22:	6d 93       	st	X+, r22
    2f24:	70 83       	st	Z, r23
    2f26:	62 91       	ld	r22, -Z
    2f28:	ae 17       	cp	r26, r30
    2f2a:	bf 07       	cpc	r27, r31
    2f2c:	c8 f3       	brcs	.-14     	; 0x2f20 <strrev+0x10>
    2f2e:	08 95       	ret

00002f30 <__udivmodhi4>:
    2f30:	aa 1b       	sub	r26, r26
    2f32:	bb 1b       	sub	r27, r27
    2f34:	51 e1       	ldi	r21, 0x11	; 17
    2f36:	07 c0       	rjmp	.+14     	; 0x2f46 <__udivmodhi4_ep>

00002f38 <__udivmodhi4_loop>:
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	a6 17       	cp	r26, r22
    2f3e:	b7 07       	cpc	r27, r23
    2f40:	10 f0       	brcs	.+4      	; 0x2f46 <__udivmodhi4_ep>
    2f42:	a6 1b       	sub	r26, r22
    2f44:	b7 0b       	sbc	r27, r23

00002f46 <__udivmodhi4_ep>:
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	5a 95       	dec	r21
    2f4c:	a9 f7       	brne	.-22     	; 0x2f38 <__udivmodhi4_loop>
    2f4e:	80 95       	com	r24
    2f50:	90 95       	com	r25
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	08 95       	ret

00002f58 <_exit>:
    2f58:	f8 94       	cli

00002f5a <__stop_program>:
    2f5a:	ff cf       	rjmp	.-2      	; 0x2f5a <__stop_program>
